bfs_plot <- as.data.frame(bfs_plot)
colnames(bfs_plot) <- c("value", "x", "y")
pal <- jet.col(n = 100, alpha = 1)
labs <- seq(0, 1, length.out = 6)
if (i %in% c(13, 14, 15)     ) { x_lab = "" } else { x_lab = "" }
if (i %in% c(1, 4, 7, 10, 13)) { y_lab = ""  } else { y_lab = "" }
if (i %in% c(13, 14, 15)) { guide = "colourbar" } else { guide = "none" }
if (i %in% c(13, 14, 15)) { plot_margin = margin(0, 0, 0, 0, "cm") } else { plot_margin = margin(0, 0, 2.5, 0, "cm") }
pps[[i]] <- ggplot() +
geom_tile(data = bfs_plot, aes(x = x, y = y, fill = value)) +
geom_sf(data = USA, color = "black", fill = NA, lwd = 0.5) +
scale_fill_gradientn(guide = guide,
name = bquote(phi*"(x)"),
colors = pal, breaks = labs,
labels = as.character(format(labs, nsmall = 1)),
limits = c(labs[1], tail(labs, 1))) +
labs(x = x_lab, y = y_lab, title ="") +
theme_bw() +
theme(text = element_text(size = 24, family = "LM Roman 10"),
legend.key.height = unit(0.5, "cm"),
legend.key.width  = unit(3, "cm"),
plot.margin = plot_margin,
plot.title = element_text(hjust = 0.5)) +
coord_sf(ndiscr = 0)
#
}
pp <- wrap_elements(pps[[ 1]] + pps[[ 2]] + pps[[ 3]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[ 4]] + pps[[ 5]] + pps[[ 6]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[ 7]] + pps[[ 8]] + pps[[ 9]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[10]] + pps[[11]] + pps[[12]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[13]] + pps[[14]] + pps[[15]] +
plot_layout(widths = c(1, 1, 1), guides = "collect") &
scale_fill_gradientn(name = "",
limits = c(labs[1], tail(labs, 1)),
colors = pal, breaks = labs,
labels = as.character(format(labs, nsmall = 1))) & theme(legend.position = "bottom"),
)
ggsave(filename = paste("APPLICATION/IMAGES/phi.jpeg", sep = ""), plot = pp, width = 8000, height = 9000, units = c("px"), dpi = 300, bg = "white")
for (i in 1:n_base_functions) {
crs(bfs_all[[i]]) <- "+init=epsg:6345 +units=km +no_defs"
bfs_plot <- as(bfs_all[[i]], "SpatialPixelsDataFrame")
bfs_plot <- as.data.frame(bfs_plot)
colnames(bfs_plot) <- c("value", "x", "y")
pal <- jet.col(n = 100, alpha = 1)
labs <- seq(0, 1, length.out = 6)
if (i %in% c(13, 14, 15)     ) { x_lab = "" } else { x_lab = "" }
if (i %in% c(1, 4, 7, 10, 13)) { y_lab = ""  } else { y_lab = "" }
if (i %in% c(13, 14, 15)) { guide = "colourbar" } else { guide = "none" }
if (i %in% c(13, 14, 15)) { plot_margin = margin(0, 0, 0, 0, "cm") } else { plot_margin = margin(0, 0, 2.45, 0, "cm") }
pps[[i]] <- ggplot() +
geom_tile(data = bfs_plot, aes(x = x, y = y, fill = value)) +
geom_sf(data = USA, color = "black", fill = NA, lwd = 0.5) +
scale_fill_gradientn(guide = guide,
name = bquote(phi*"(x)"),
colors = pal, breaks = labs,
labels = as.character(format(labs, nsmall = 1)),
limits = c(labs[1], tail(labs, 1))) +
labs(x = x_lab, y = y_lab, title ="") +
theme_bw() +
theme(text = element_text(size = 24, family = "LM Roman 10"),
legend.key.height = unit(0.5, "cm"),
legend.key.width  = unit(2.8, "cm"),
plot.margin = plot_margin,
plot.title = element_text(hjust = 0.5)) +
coord_sf(ndiscr = 0)
#
}
pp <- wrap_elements(pps[[ 1]] + pps[[ 2]] + pps[[ 3]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[ 4]] + pps[[ 5]] + pps[[ 6]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[ 7]] + pps[[ 8]] + pps[[ 9]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[10]] + pps[[11]] + pps[[12]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[13]] + pps[[14]] + pps[[15]] +
plot_layout(widths = c(1, 1, 1), guides = "collect") &
scale_fill_gradientn(name = "",
limits = c(labs[1], tail(labs, 1)),
colors = pal, breaks = labs,
labels = as.character(format(labs, nsmall = 1))) & theme(legend.position = "bottom"),
)
ggsave(filename = paste("APPLICATION/IMAGES/phi.jpeg", sep = ""), plot = pp, width = 8000, height = 9000, units = c("px"), dpi = 300, bg = "white")
for (i in 1:n_base_functions) {
crs(bfs_all[[i]]) <- "+init=epsg:6345 +units=km +no_defs"
bfs_plot <- as(bfs_all[[i]], "SpatialPixelsDataFrame")
bfs_plot <- as.data.frame(bfs_plot)
colnames(bfs_plot) <- c("value", "x", "y")
pal <- jet.col(n = 100, alpha = 1)
labs <- seq(0, 1, length.out = 6)
if (i %in% c(13, 14, 15)     ) { x_lab = "" } else { x_lab = "" }
if (i %in% c(1, 4, 7, 10, 13)) { y_lab = ""  } else { y_lab = "" }
if (i %in% c(13, 14, 15)) { guide = "colourbar" } else { guide = "none" }
if (i %in% c(13, 14, 15)) { plot_margin = margin(0, 0, 0, 0, "cm") } else { plot_margin = margin(0, 0, 2.35, 0, "cm") }
pps[[i]] <- ggplot() +
geom_tile(data = bfs_plot, aes(x = x, y = y, fill = value)) +
geom_sf(data = USA, color = "black", fill = NA, lwd = 0.5) +
scale_fill_gradientn(guide = guide,
name = bquote(phi*"(x)"),
colors = pal, breaks = labs,
labels = as.character(format(labs, nsmall = 1)),
limits = c(labs[1], tail(labs, 1))) +
labs(x = x_lab, y = y_lab, title ="") +
theme_bw() +
theme(text = element_text(size = 24, family = "LM Roman 10"),
legend.key.height = unit(0.5, "cm"),
legend.key.width  = unit(2.9, "cm"),
plot.margin = plot_margin,
plot.title = element_text(hjust = 0.5)) +
coord_sf(ndiscr = 0)
#
}
pp <- wrap_elements(pps[[ 1]] + pps[[ 2]] + pps[[ 3]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[ 4]] + pps[[ 5]] + pps[[ 6]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[ 7]] + pps[[ 8]] + pps[[ 9]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[10]] + pps[[11]] + pps[[12]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[13]] + pps[[14]] + pps[[15]] +
plot_layout(widths = c(1, 1, 1), guides = "collect") &
scale_fill_gradientn(name = "",
limits = c(labs[1], tail(labs, 1)),
colors = pal, breaks = labs,
labels = as.character(format(labs, nsmall = 1))) & theme(legend.position = "bottom"),
)
ggsave(filename = paste("APPLICATION/IMAGES/phi.jpeg", sep = ""), plot = pp, width = 8000, height = 9000, units = c("px"), dpi = 300, bg = "white")
for (i in 1:n_base_functions) {
crs(bfs_all[[i]]) <- "+init=epsg:6345 +units=km +no_defs"
bfs_plot <- as(bfs_all[[i]], "SpatialPixelsDataFrame")
bfs_plot <- as.data.frame(bfs_plot)
colnames(bfs_plot) <- c("value", "x", "y")
pal <- jet.col(n = 100, alpha = 1)
labs <- seq(0, 1, length.out = 6)
if (i %in% c(13, 14, 15)     ) { x_lab = "" } else { x_lab = "" }
if (i %in% c(1, 4, 7, 10, 13)) { y_lab = ""  } else { y_lab = "" }
if (i %in% c(13, 14, 15)) { guide = "colourbar" } else { guide = "none" }
if (i %in% c(13, 14, 15)) { plot_margin = margin(0, 0, 0, 0, "cm") } else { plot_margin = margin(0, 0, 2.35, 0, "cm") }
pps[[i]] <- ggplot() +
geom_tile(data = bfs_plot, aes(x = x, y = y, fill = value)) +
geom_sf(data = USA, color = "black", fill = NA, lwd = 0.5) +
scale_fill_gradientn(guide = guide,
name = bquote(phi*"(x)"),
colors = pal, breaks = labs,
labels = as.character(format(labs, nsmall = 1)),
limits = c(labs[1], tail(labs, 1))) +
labs(x = x_lab, y = y_lab, title ="") +
theme_bw() +
theme(text = element_text(size = 24, family = "LM Roman 10"),
legend.key.height = unit(0.5, "cm"),
legend.key.width  = unit(2.9, "cm"),
plot.margin = plot_margin,
plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
coord_sf(ndiscr = 0)
#
}
pp <- wrap_elements(pps[[ 1]] + pps[[ 2]] + pps[[ 3]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[ 4]] + pps[[ 5]] + pps[[ 6]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[ 7]] + pps[[ 8]] + pps[[ 9]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[10]] + pps[[11]] + pps[[12]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[13]] + pps[[14]] + pps[[15]] +
plot_layout(widths = c(1, 1, 1), guides = "collect") &
scale_fill_gradientn(name = "",
limits = c(labs[1], tail(labs, 1)),
colors = pal, breaks = labs,
labels = as.character(format(labs, nsmall = 1))) & theme(legend.position = "bottom"),
)
ggsave(filename = paste("APPLICATION/IMAGES/phi.jpeg", sep = ""), plot = pp, width = 8000, height = 9000, units = c("px"), dpi = 300, bg = "white")
ggsave(filename = paste("APPLICATION/IMAGES/phi.jpeg", sep = ""), plot = pp, width = 12000, height = 15000, units = c("px"), dpi = 300, bg = "white")
ggsave(filename = paste("APPLICATION/IMAGES/phi.jpeg", sep = ""), plot = pp, width = 10000, height = 12000, units = c("px"), dpi = 300, bg = "white")
for (i in 1:n_base_functions) {
crs(bfs_all[[i]]) <- "+init=epsg:6345 +units=km +no_defs"
bfs_plot <- as(bfs_all[[i]], "SpatialPixelsDataFrame")
bfs_plot <- as.data.frame(bfs_plot)
colnames(bfs_plot) <- c("value", "x", "y")
pal <- jet.col(n = 100, alpha = 1)
labs <- seq(0, 1, length.out = 6)
if (i %in% c(13, 14, 15)     ) { x_lab = "" } else { x_lab = "" }
if (i %in% c(1, 4, 7, 10, 13)) { y_lab = ""  } else { y_lab = "" }
if (i %in% c(13, 14, 15)) { guide = "colourbar" } else { guide = "none" }
if (i %in% c(13, 14, 15)) { plot_margin = margin(0, 0, 0, 0, "cm") } else { plot_margin = margin(0, 0, 2.35, 0, "cm") }
pps[[i]] <- ggplot() +
geom_tile(data = bfs_plot, aes(x = x, y = y, fill = value)) +
geom_sf(data = USA, color = "black", fill = NA, lwd = 0.5) +
scale_fill_gradientn(guide = guide,
name = bquote(phi*"(x)"),
colors = pal, breaks = labs,
labels = as.character(format(labs, nsmall = 1)),
limits = c(labs[1], tail(labs, 1))) +
labs(x = x_lab, y = y_lab, title ="") +
theme_bw() +
theme(text = element_text(size = 24, family = "LM Roman 10"),
legend.key.height = unit(0.5, "cm"),
legend.key.width  = unit(2.9, "cm"),
plot.margin = plot_margin,
plot.title = element_text(hjust = 0.5)) +
coord_sf(ndiscr = 0)
#
}
pp <- wrap_elements(pps[[ 1]] + pps[[ 2]] + pps[[ 3]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[ 4]] + pps[[ 5]] + pps[[ 6]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[ 7]] + pps[[ 8]] + pps[[ 9]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[10]] + pps[[11]] + pps[[12]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[13]] + pps[[14]] + pps[[15]] +
plot_layout(widths = c(1, 1, 1), guides = "collect") &
scale_fill_gradientn(name = "",
limits = c(labs[1], tail(labs, 1)),
colors = pal, breaks = labs,
labels = as.character(format(labs, nsmall = 1))) & theme(legend.position = "bottom"),
)
ggsave(filename = paste("APPLICATION/IMAGES/phi.jpeg", sep = ""), plot = pp, width = 10000, height = 12000, units = c("px"), dpi = 300, bg = "white")
for (i in 1:n_base_functions) {
crs(bfs_all[[i]]) <- "+init=epsg:6345 +units=km +no_defs"
bfs_plot <- as(bfs_all[[i]], "SpatialPixelsDataFrame")
bfs_plot <- as.data.frame(bfs_plot)
colnames(bfs_plot) <- c("value", "x", "y")
pal <- jet.col(n = 100, alpha = 1)
labs <- seq(0, 1, length.out = 6)
if (i %in% c(13, 14, 15)     ) { x_lab = "" } else { x_lab = "" }
if (i %in% c(1, 4, 7, 10, 13)) { y_lab = ""  } else { y_lab = "" }
if (i %in% c(13, 14, 15)) { guide = "colourbar" } else { guide = "none" }
if (i %in% c(13, 14, 15)) { plot_margin = margin(0, 0, 0, 0, "cm") } else { plot_margin = margin(0, 0, 2.35, 0, "cm") }
pps[[i]] <- ggplot() +
geom_tile(data = bfs_plot, aes(x = x, y = y, fill = value)) +
geom_sf(data = USA, color = "black", fill = NA, lwd = 0.5) +
scale_fill_gradientn(guide = guide,
name = bquote(phi*"(x)"),
colors = pal, breaks = labs,
labels = as.character(format(labs, nsmall = 1)),
limits = c(labs[1], tail(labs, 1))) +
labs(x = x_lab, y = y_lab, title ="") +
theme_bw() +
theme(text = element_text(size = 30, family = "LM Roman 10"),
legend.key.height = unit(1.0, "cm"),
legend.key.width  = unit(2.9, "cm"),
plot.margin = plot_margin,
plot.title = element_text(hjust = 0.5)) +
coord_sf(ndiscr = 0)
#
}
pp <- wrap_elements(pps[[ 1]] + pps[[ 2]] + pps[[ 3]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[ 4]] + pps[[ 5]] + pps[[ 6]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[ 7]] + pps[[ 8]] + pps[[ 9]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[10]] + pps[[11]] + pps[[12]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[13]] + pps[[14]] + pps[[15]] +
plot_layout(widths = c(1, 1, 1), guides = "collect") &
scale_fill_gradientn(name = "",
limits = c(labs[1], tail(labs, 1)),
colors = pal, breaks = labs,
labels = as.character(format(labs, nsmall = 1))) & theme(legend.position = "bottom"),
)
ggsave(filename = paste("APPLICATION/IMAGES/phi.jpeg", sep = ""), plot = pp, width = 9000, height = 12000, units = c("px"), dpi = 300, bg = "white")
ggsave(filename = paste("APPLICATION/IMAGES/phi.jpeg", sep = ""), plot = pp, width = 1200, height = 12000, units = c("px"), dpi = 300, bg = "white")
ggsave(filename = paste("APPLICATION/IMAGES/phi.jpeg", sep = ""), plot = pp, width = 12000, height = 12000, units = c("px"), dpi = 300, bg = "white")
ggsave(filename = paste("APPLICATION/IMAGES/phi.jpeg", sep = ""), plot = pp, width = 8000, height = 12000, units = c("px"), dpi = 300, bg = "white")
for (i in 1:n_base_functions) {
crs(bfs_all[[i]]) <- "+init=epsg:6345 +units=km +no_defs"
bfs_plot <- as(bfs_all[[i]], "SpatialPixelsDataFrame")
bfs_plot <- as.data.frame(bfs_plot)
colnames(bfs_plot) <- c("value", "x", "y")
pal <- jet.col(n = 100, alpha = 1)
labs <- seq(0, 1, length.out = 6)
if (i %in% c(13, 14, 15)     ) { x_lab = "" } else { x_lab = "" }
if (i %in% c(1, 4, 7, 10, 13)) { y_lab = ""  } else { y_lab = "" }
if (i %in% c(13, 14, 15)) { guide = "colourbar" } else { guide = "none" }
if (i %in% c(13, 14, 15)) { plot_margin = margin(0, 0, 0, 0, "cm") } else { plot_margin = margin(0, 0, 3, 0, "cm") }
pps[[i]] <- ggplot() +
geom_tile(data = bfs_plot, aes(x = x, y = y, fill = value)) +
geom_sf(data = USA, color = "black", fill = NA, lwd = 0.5) +
scale_fill_gradientn(guide = guide,
name = bquote(phi*"(x)"),
colors = pal, breaks = labs,
labels = as.character(format(labs, nsmall = 1)),
limits = c(labs[1], tail(labs, 1))) +
labs(x = x_lab, y = y_lab, title ="") +
theme_bw() +
theme(text = element_text(size = 30, family = "LM Roman 10"),
legend.key.height = unit(1.0, "cm"),
legend.key.width  = unit(2.9, "cm"),
plot.margin = plot_margin,
plot.title = element_text(hjust = 0.5)) +
coord_sf(ndiscr = 0)
#
}
pp <- wrap_elements(pps[[ 1]] + pps[[ 2]] + pps[[ 3]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[ 4]] + pps[[ 5]] + pps[[ 6]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[ 7]] + pps[[ 8]] + pps[[ 9]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[10]] + pps[[11]] + pps[[12]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[13]] + pps[[14]] + pps[[15]] +
plot_layout(widths = c(1, 1, 1), guides = "collect") &
scale_fill_gradientn(name = "",
limits = c(labs[1], tail(labs, 1)),
colors = pal, breaks = labs,
labels = as.character(format(labs, nsmall = 1))) & theme(legend.position = "bottom"),
)
ggsave(filename = paste("APPLICATION/IMAGES/phi.jpeg", sep = ""), plot = pp, width = 8000, height = 12000, units = c("px"), dpi = 300, bg = "white")
for (i in 1:n_base_functions) {
crs(bfs_all[[i]]) <- "+init=epsg:6345 +units=km +no_defs"
bfs_plot <- as(bfs_all[[i]], "SpatialPixelsDataFrame")
bfs_plot <- as.data.frame(bfs_plot)
colnames(bfs_plot) <- c("value", "x", "y")
pal <- jet.col(n = 100, alpha = 1)
labs <- seq(0, 1, length.out = 6)
if (i %in% c(13, 14, 15)     ) { x_lab = "" } else { x_lab = "" }
if (i %in% c(1, 4, 7, 10, 13)) { y_lab = ""  } else { y_lab = "" }
if (i %in% c(13, 14, 15)) { guide = "colourbar" } else { guide = "none" }
if (i %in% c(13, 14, 15)) { plot_margin = margin(0, 0, 0, 0, "cm") } else { plot_margin = margin(0, 0, 2.9, 0, "cm") }
pps[[i]] <- ggplot() +
geom_tile(data = bfs_plot, aes(x = x, y = y, fill = value)) +
geom_sf(data = USA, color = "black", fill = NA, lwd = 0.5) +
scale_fill_gradientn(guide = guide,
name = bquote(phi*"(x)"),
colors = pal, breaks = labs,
labels = as.character(format(labs, nsmall = 1)),
limits = c(labs[1], tail(labs, 1))) +
labs(x = x_lab, y = y_lab, title ="") +
theme_bw() +
theme(text = element_text(size = 30, family = "LM Roman 10"),
legend.key.height = unit(1.0, "cm"),
legend.key.width  = unit(2.9, "cm"),
plot.margin = plot_margin,
plot.title = element_text(hjust = 0.5),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank()) +
coord_sf(ndiscr = 0)
#
}
pp <- wrap_elements(pps[[ 1]] + pps[[ 2]] + pps[[ 3]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[ 4]] + pps[[ 5]] + pps[[ 6]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[ 7]] + pps[[ 8]] + pps[[ 9]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[10]] + pps[[11]] + pps[[12]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[13]] + pps[[14]] + pps[[15]] +
plot_layout(widths = c(1, 1, 1), guides = "collect") &
scale_fill_gradientn(name = "",
limits = c(labs[1], tail(labs, 1)),
colors = pal, breaks = labs,
labels = as.character(format(labs, nsmall = 1))) & theme(legend.position = "bottom"),
)
ggsave(filename = paste("APPLICATION/IMAGES/phi.jpeg", sep = ""), plot = pp, width = 8000, height = 12000, units = c("px"), dpi = 300, bg = "white")
USA
class(USA)
st_union(m$geom)
st_union(USA$geom)
USA_all <- st_union(USA$geom)
plot(USA_all)
pps <- list()
for (i in 1:n_base_functions) {
crs(bfs_all[[i]]) <- "+init=epsg:6345 +units=km +no_defs"
bfs_plot <- as(bfs_all[[i]], "SpatialPixelsDataFrame")
bfs_plot <- as.data.frame(bfs_plot)
colnames(bfs_plot) <- c("value", "x", "y")
pal <- jet.col(n = 100, alpha = 1)
labs <- seq(0, 1, length.out = 6)
if (i %in% c(13, 14, 15)     ) { x_lab = "" } else { x_lab = "" }
if (i %in% c(1, 4, 7, 10, 13)) { y_lab = ""  } else { y_lab = "" }
if (i %in% c(13, 14, 15)) { guide = "colourbar" } else { guide = "none" }
if (i %in% c(13, 14, 15)) { plot_margin = margin(0, 0, 0, 0, "cm") } else { plot_margin = margin(0, 0, 2.9, 0, "cm") }
pps[[i]] <- ggplot() +
geom_tile(data = bfs_plot, aes(x = x, y = y, fill = value)) +
geom_sf(data = USA_all, color = "black", fill = NA, lwd = 0.5) +
scale_fill_gradientn(guide = guide,
name = bquote(phi*"(x)"),
colors = pal, breaks = labs,
labels = as.character(format(labs, nsmall = 1)),
limits = c(labs[1], tail(labs, 1))) +
labs(x = x_lab, y = y_lab, title ="") +
theme_bw() +
theme(text = element_text(size = 30, family = "LM Roman 10"),
legend.key.height = unit(1.0, "cm"),
legend.key.width  = unit(2.9, "cm"),
plot.margin = plot_margin,
plot.title = element_text(hjust = 0.5),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank()) +
coord_sf(ndiscr = 0)
#
}
pp <- wrap_elements(pps[[ 1]] + pps[[ 2]] + pps[[ 3]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[ 4]] + pps[[ 5]] + pps[[ 6]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[ 7]] + pps[[ 8]] + pps[[ 9]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[10]] + pps[[11]] + pps[[12]] + plot_layout(widths = c(1, 1, 1))) /
wrap_elements(pps[[13]] + pps[[14]] + pps[[15]] +
plot_layout(widths = c(1, 1, 1), guides = "collect") &
scale_fill_gradientn(name = "",
limits = c(labs[1], tail(labs, 1)),
colors = pal, breaks = labs,
labels = as.character(format(labs, nsmall = 1))) & theme(legend.position = "bottom"),
)
ggsave(filename = paste("APPLICATION/IMAGES/phi.jpeg", sep = ""), plot = pp, width = 8000, height = 12000, units = c("px"), dpi = 300, bg = "white")
ggsave(filename = paste("APPLICATION/IMAGES/phi.jpeg", sep = ""), plot = pp, width = 8000, height = 12000, units = c("px"), dpi = 300, bg = "white")
bfs_pred
base_functions
unidirectional_triangular
Wendland()
Wendland
bfs
bfs[[15]]
bfs[[15]] |> range()
Wendland
Wendland <- function (x, y, center_x, center_y, bandwidth = 0.5, ...) {
pars <- list(...)
if (length(pars) != 0) {
bandwidth <- ifelse(test = is.null(pars$bandwidth), yes = bandwidth, no = pars$bandwidth)
}
pts <- cbind((x - center_x), (y - center_y))
d <- apply(X = pts, MARGIN = 1, FUN = Euclidean_norm) / bandwidth
k <- (1 - d) ^ 6 * (35 * d ^ 2 + 18 * d + 3) / 3 * as.numeric(d <= 1)
# k <- k / max(k)
k
}
bfs <- base_functions(center_pts = center_pts, mesh = mesh_wgt$mesh, loct = loct$loct, smoothing_kernel = smoothing_kernel, bandwidth = bandwidth, NS = NS, map = map)
bfs[[15]] |> range()
bfs[[14]] |> range()
bfs[[11]] |> range()
bfs[[1]] |> range()
library("plot3D")
library("tidyverse")
library("patchwork")
source("header.R")
source("functions_data_generation.R")
source("functions_model_fitting.R")
source("functions_result_processing.R")
source("functions_aux.R")
scenario <- 5
data <- readRDS(file = "APPLICATION/data.rds")
result_obj <- readRDS(file = paste("APPLICATION/FITTED_MODELS/scenario", scenario, ".rds", sep = ""))
USA <- readRDS(file = "APPLICATION/USA.rds")
##################################################
##################################################
USA <- USA[!(USA$shapeName %in% c("Alaska", "American Samoa","Commonwealth of the Northern Mariana Islands", "Guam", "Hawaii", "Puerto Rico", "United States Virgin Islands")), ]
USA <- st_transform(x = USA, crs = "+init=epsg:6345 +units=km +no_defs")
result <- result_obj$result
bfs_pred <- result_obj$bfs_pred
fs_formula <- result_obj$fs_formula
coord_pred <- result_obj$coord_pred
n_coord_pr <- result_obj$n_coord_pr
idx_lat <- inla.stack.index(fs_formula$full_stack, tag = "pred_y")$data[(n_coord_pr + 1):nrow(coord_pred)]
fitted_latent <- cbind(coord_pred[(n_coord_pr + 1):nrow(coord_pred), ], result$fit$summary.fitted.values[idx_lat, c("mean")])
colnames(fitted_latent) <- c("x", "y", "z")
data$z <- fitted_latent$z
##################################################
# Estimated process in the observation locations #
##################################################
pal <- jet.col(n = 100, alpha = 0.9)
labs <- seq(round(min(data$z) - 0.01, 2), round(max(data$z) + 0.01, 2), length.out = 6)
p <- ggplot() +
geom_sf(data = USA, color = "black", fill = NA, lwd = 0.5) +
geom_sf(data = data, aes(color = z), size = 5) +
scale_colour_gradientn(name = expression(paste(PM[2.5], " level", sep = "")), colors = pal, breaks = labs, labels = as.character(format(labs, nsmall = 3)), limits = c(labs[1], tail(labs, 1))) +
labs(x = "Longitude", y = "Latitude", title = "") +
theme_bw() +
theme(text = element_text(size = 24, family = "LM Roman 10"),
legend.key.height = unit(2.57, "cm"),
legend.key.width  = unit(0.75, "cm"),
plot.margin = margin(0, 0, 0, 0, "cm"))
p
ss <- (result$fit$summary.fitted.values[idx_lat, c("sd")] ^ 2) + (1 / result$fit$summary.hyperpar["Precision for the Gaussian observations", "mean"])
CRPS_latent  <- mean(CRPS(orig = data$mean, pred = fitted_latent$z, s = sqrt(ss)))
SCRPS_latent <- mean(SCRPS(orig = data$mean, pred = fitted_latent$z, s = sqrt(ss)))
error_latent <- MSE(orig = data$mean, pred = fitted_latent$z)
scores <- list(error = error_latent,
CRPS  = CRPS_latent,
SCRPS = SCRPS_latent)
scores
if (TRUE) {
print(paste("Scenario ", scenario, sep = ""))
print(paste("Error (latent): ", round(x = error_latent, digits = 4), sep = ""))
print(paste("CRPS  (latent): ", round(x = CRPS_latent,  digits = 4), sep = ""))
print(paste("SCRPS (latent): ", round(x = SCRPS_latent, digits = 4), sep = ""))
}
idx_lat <- inla.stack.index(fs_formula$full_stack, tag = "pred_y")$data[1:n_coord_pr]
fitted_latent <- cbind(coord_pred[1:n_coord_pr, ], result$fit$summary.fitted.values[idx_lat, c("mean")])
colnames(fitted_latent) <- c("x", "y", "estimated")
# Create a gridded spatial object from "process"
coordinates(fitted_latent) <- ~ x + y
gridded(fitted_latent) <- TRUE
fitted_latent <- raster(fitted_latent)
crs(fitted_latent) = "+init=epsg:6345 +units=km +no_defs"
fitted_latent    <- as(fitted_latent, "SpatialPixelsDataFrame")
fitted_latent_df <- as.data.frame(fitted_latent)
colnames(fitted_latent_df) <- c("estimated", "x", "y")
pal <- jet.col(n = 100, alpha = 0.9)
labs <- seq(round(min(fitted_latent_df$estimated) - 0.01, 2), round(max(fitted_latent_df$estimated) + 0.01, 2), length.out = 6)
p_2 <- ggplot() +
geom_tile(data = fitted_latent_df, mapping = aes(x = x, y = y, fill = estimated)) +
geom_sf(data = USA, color = "black", fill = NA, lwd = 0.5) +
scale_fill_gradientn(name = expression(paste(PM[2.5], " level", sep = "")), colors = pal, breaks = labs, labels = as.character(format(labs, nsmall = 3)), limits = c(labs[1], tail(labs, 1))) +
labs(x = "Longitude", y = "Latitude", title = "") +
theme_bw() +
theme(text = element_text(size = 24, family = "LM Roman 10"),
legend.key.height = unit(2.57, "cm"),
legend.key.width  = unit(0.75, "cm"),
plot.margin = margin(0, 0, 0, 0, "cm"))
p_2
pal
labs <- seq(round(min(fitted_latent_df$estimated) - 0.01, 2), round(max(fitted_latent_df$estimated) + 0.01, 2), length.out = 6)
labs
labs <- seq(2.28, 14.68, length.out = 6)
labs
p_2 <- ggplot() +
geom_tile(data = fitted_latent_df, mapping = aes(x = x, y = y, fill = estimated)) +
geom_sf(data = USA, color = "black", fill = NA, lwd = 0.5) +
scale_fill_gradientn(name = expression(paste(PM[2.5], " level", sep = "")), colors = pal, breaks = labs, labels = as.character(format(labs, nsmall = 3)), limits = c(labs[1], tail(labs, 1))) +
labs(x = "Longitude", y = "Latitude", title = "") +
theme_bw() +
theme(text = element_text(size = 24, family = "LM Roman 10"),
legend.key.height = unit(2.57, "cm"),
legend.key.width  = unit(0.75, "cm"),
plot.margin = margin(0, 0, 0, 0, "cm"))
p_2
ggsave(filename = paste("APPLICATION/IMAGES/", sprintf("%02d", scenario), "/latent_scale.jpeg", sep = ""), plot = p_2, width = 3250, height = 2000, units = c("px"), dpi = 300, bg = "white")
