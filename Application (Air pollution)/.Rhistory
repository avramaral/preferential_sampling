} else if(m == 2) {
chosen_dataset = urban_trafic_data
} else if(m == 3) {
chosen_dataset = urban_industrial_data
} else if(m == 4) {
chosen_dataset = all_urban_data
} else if(m == 5) {
chosen_dataset = rural_suburban_data
} else if(m == 6) {
chosen_dataset = all_data
}
Y = chosen_dataset$mean
locations = data.frame(x = chosen_dataset$longitude,
y = chosen_dataset$latitude)
ras = raster(res = 0.0385)
uk  = raster::getData('GADM', country = "GBR", level = 0)
cr  = crop(ras, uk, snap = "out")
values(cr) = 1:ncell(cr)
uk  = mask(cr, uk)
coord = rasterToPoints(uk)[, 1:2]
#############################################################################################################################
###################
# INLA without PS #
###################
mesh = inla.mesh.2d(loc = as.matrix(coord),
offset = c(1, 1),
cutoff = 0.25,
max.edge = c(2, 2))
plot(mesh, main = '')
points(locations, col = 'red')
spde = inla.spde2.matern(mesh = mesh, alpha = 2) # alpha = nu + (d / 2)
indx = seq(from = 1, to = spde$mesh$n, by = 1)
A = inla.spde.make.A(mesh = mesh, loc = as.matrix(locations))
Ap = inla.spde.make.A(mesh = mesh, loc = as.matrix(coord))
dim(A)  # number of points x number of vertices in the triangulation
dim(Ap) # number of points to be predicted x number of vertices in the triangulation
stk_e = inla.stack(
tag = 'est',
data = list(y = Y),
A = list(1, A),
effects = list(data.frame(mu = rep(1, nrow(locations))), x = indx)
)
stk_p = inla.stack(
tag = 'pred',
data = list(y = NA),
A = list(1, Ap),
effects = list(data.frame(mu = rep(1, nrow(coord))), x = indx)
)
stk_full = inla.stack(stk_e, stk_p)
res = inla(y ~ 0 + mu + f(x, model = spde),
data = inla.stack.data(stk_full),
control.predictor = list(compute = TRUE, A = inla.stack.A(stk_full)), verbose = FALSE)
# Retrieve the indexes from the results for which we have the locations to be predicted
index = inla.stack.index(stk_full, tag = 'pred')$data
pred_mean = res$summary.fitted.values[index, 'mean'] # Predicted values for the given locations
INLApred = data.frame(x = coord[, 1], y = coord[, 2], z = pred_mean)
################
# INLA with PS #
################
new_coord = unique(rbind(coord, locations))
mesh = inla.mesh.2d(loc = as.matrix(new_coord),
offset = c(1, 1),
cutoff = 0.25,
max.edge = c(2, 2))
plot(mesh, main = '')
points(locations, col = 'red')
spde = inla.spde2.matern(mesh = mesh, alpha = 2) # alpha = nu + (d / 2)
i_loc = mesh$idx$loc
ig = c(i_loc, rep(NA, nrow(new_coord)))
ip = c(rep(NA, nrow(new_coord)), i_loc)
mu_inla = c(rep(1, nrow(new_coord)), rep(0, nrow(new_coord)))
alpha_inla = c(rep(0, nrow(new_coord)), rep(1, nrow(new_coord)))
y = rep(NA, nrow(new_coord)) # Create an empty vector
samp_rows = row.match(locations, new_coord) # Find the sampling locations in 'new_coord'
y[samp_rows] = Y # Store the observed values in the 'y' vector
y = c(y, rep(NA, nrow(new_coord)))
p = rep(0, nrow(new_coord)) # Create an empty vector
p[samp_rows] = 1 # 'p' stands for points
p = c(rep(NA, nrow(new_coord)), p)
y = matrix(c(y, p), nrow(new_coord) * 2, 2)
data = list(y = y,mu = mu_inla, alpha = alpha_inla, ig = ig, ip = ip)
res = inla(formula = y ~ 0 + mu + alpha + f(ig, model = spde) + f(ip, copy = 'ig', fixed = FALSE),
family = c('gaussian', 'poisson'),
data = data,
control.predictor = list(compute = TRUE, link = 1), verbose = FALSE)
pred_meanPS = res$summary.fitted.values[(1:(nrow(coord))), 'mean']
INLApredPS = data.frame(x = coord[, 1], y = coord[, 2], z = pred_meanPS)
#############################################################################################################################
#############################################################################################################################
##############
# FINAL PLOT #
##############
if(m == 1) {
main = 'Urban backgroud stations'
} else if(m == 2) {
main = 'Urban trafic stations'
} else if(m == 3) {
main = 'Urban industrial stations'
} else if(m == 4) {
main = 'Urban stations'
} else if(m == 5) {
main = 'Rural stations'
} else if(m == 6) {
main = 'All stations'
}
par(mfrow = c(1, 2), mar = c(1, 2, 2, 2) + 0.1,
oma = c(2, 0, 1, 2) + 0.1, family = "LM Roman 10")
breaks = seq(2, 13, by = 0.025)
INLApred_r = rasterFromXYZ(INLApred)
plot(INLApred_r, col = (viridis(440, begin = 0.35, end = 1)), main = paste(main, 'with non-preferential sampling'),
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.875, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(2, 13, 1), labels = seq(2, 13, 1), cex.axis = 1.25))
points(locations)
INLApredPS_r = rasterFromXYZ(INLApredPS)
plot(INLApredPS_r, col = (viridis(440, begin = 0.35, end = 1)), main = paste(main, 'with preferential sampling'),
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.875, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(2, 13, 1), labels = seq(2, 13, 1), cex.axis = 1.25))
points(locations)
if(m == 1) {
INLA_1 = INLApred
INLAPS_1 = INLApredPS
} else if(m == 2) {
INLA_2 = INLApred
INLAPS_2 = INLApredPS
} else if(m == 3) {
INLA_3 = INLApred
INLAPS_3 = INLApredPS
} else if(m == 4) {
INLA_4 = INLApred
INLAPS_4 = INLApredPS
} else if(m == 5) {
INLA_5 = INLApred
INLAPS_5 = INLApredPS
} else if(m == 6) {
INLA_6 = INLApred
INLAPS_6 = INLApredPS
}
}
diff1 = INLAPS_6[, 3] - INLA_4[, 3]
diff2 = INLAPS_6[, 3] - INLAPS_4[, 3]
diff1 = data.frame(x = INLAPS_6[, 1],
y = INLAPS_6[, 2],
z = diff2)
diff2 = data.frame(x = INLAPS_6[, 1],
y = INLAPS_6[, 2],
z = diff3)
rwb = colorRampPalette(colors = c("red", "white", "blue"))
par(mfrow = c(1, 3), mar = c(1, 2, 2, 2) + 0.1,
oma = c(2, 0, 1, 2) + 0.1, family = "LM Roman 10")
breaks = seq(-2.25, 2.25, 0.025)
plot(rasterFromXYZ(diff1), col = (rwb(180)), main = 'Difference between PS (all data) and Nonâ€“PS (urban data)',
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.375, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(-2, 2, 1), labels = seq(-2, 2, 1), cex.axis = 1.25))
points(locations)
plot(rasterFromXYZ(diff2), col = (rwb(180)), main = 'Difference between PS (all data) and PS (urban data)',
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.375, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(-2, 2, 1), labels = seq(-2, 2, 1), cex.axis = 1.25))
points(locations)
??row.match()
library(tidyverse)
library(RandomFields)
library(raster)
library(spatstat)
library(base)
library(xlsx)
library(INLA)
library(prodlim)
#library(tmap)
#library(rnaturalearth)
#library(rnaturalearthdata)
#library(leaflet)
#library(rgeos)
#library(maps)
#library(rasterVis)
library(viridis)
#############################################################################################################################
#############################################################################################################################
data = read_csv(file = 'filtered_data.csv')
urban_background_data = data %>%
filter(site_type == 'Urban Background') %>%
group_by(site) %>%
summarize(mean = mean(pm2.5, na.rm = TRUE), latitude = first(latitude), longitude = first(longitude))
urban_background_data = drop_na(urban_background_data)
urban_trafic_data = data %>%
filter(site_type == 'Urban Traffic') %>%
group_by(site) %>%
summarize(mean = mean(pm2.5, na.rm = TRUE), latitude = first(latitude), longitude = first(longitude))
urban_trafic_data = drop_na(urban_trafic_data)
urban_industrial_data = data %>%
filter(site_type == 'Urban Industrial') %>%
group_by(site) %>%
summarize(mean = mean(pm2.5, na.rm = TRUE), latitude = first(latitude), longitude = first(longitude))
urban_industrial_data = drop_na(urban_industrial_data)
all_urban_data = data %>%
filter(site_type == 'Urban Traffic' | site_type == 'Urban Background' | site_type == 'Urban Industrial') %>%
group_by(site) %>%
summarize(mean = mean(pm2.5, na.rm = TRUE), latitude = first(latitude), longitude = first(longitude))
all_urban_data = drop_na(all_urban_data)
rural_suburban_data = data %>%
filter(site_type == 'Rural Background' | site_type == 'Suburban Background') %>%
group_by(site) %>%
summarize(mean = mean(pm2.5, na.rm = TRUE), latitude = first(latitude), longitude = first(longitude))
rural_suburban_data = drop_na(rural_suburban_data)
all_data = data %>%
group_by(site) %>%
summarize(mean = mean(pm2.5, na.rm = TRUE), latitude = first(latitude), longitude = first(longitude), site_type = first(site_type))
all_data = drop_na(all_data)
#############################################################################################################################
#############################################################################################################################
#ms = c(1, 2, 3, 4, 5, 6)
ms = c(4, 6)
for(m in ms){
print(m)
if(m == 1) {
chosen_dataset = urban_background_data
} else if(m == 2) {
chosen_dataset = urban_trafic_data
} else if(m == 3) {
chosen_dataset = urban_industrial_data
} else if(m == 4) {
chosen_dataset = all_urban_data
} else if(m == 5) {
chosen_dataset = rural_suburban_data
} else if(m == 6) {
chosen_dataset = all_data
}
Y = chosen_dataset$mean
locations = data.frame(x = chosen_dataset$longitude,
y = chosen_dataset$latitude)
ras = raster(res = 0.0385)
uk  = raster::getData('GADM', country = "GBR", level = 0)
cr  = crop(ras, uk, snap = "out")
values(cr) = 1:ncell(cr)
uk  = mask(cr, uk)
coord = rasterToPoints(uk)[, 1:2]
#############################################################################################################################
###################
# INLA without PS #
###################
mesh = inla.mesh.2d(loc = as.matrix(coord),
offset = c(1, 1),
cutoff = 0.25,
max.edge = c(2, 2))
plot(mesh, main = '')
points(locations, col = 'red')
spde = inla.spde2.matern(mesh = mesh, alpha = 2) # alpha = nu + (d / 2)
indx = seq(from = 1, to = spde$mesh$n, by = 1)
A = inla.spde.make.A(mesh = mesh, loc = as.matrix(locations))
Ap = inla.spde.make.A(mesh = mesh, loc = as.matrix(coord))
dim(A)  # number of points x number of vertices in the triangulation
dim(Ap) # number of points to be predicted x number of vertices in the triangulation
stk_e = inla.stack(
tag = 'est',
data = list(y = Y),
A = list(1, A),
effects = list(data.frame(mu = rep(1, nrow(locations))), x = indx)
)
stk_p = inla.stack(
tag = 'pred',
data = list(y = NA),
A = list(1, Ap),
effects = list(data.frame(mu = rep(1, nrow(coord))), x = indx)
)
stk_full = inla.stack(stk_e, stk_p)
res = inla(y ~ 0 + mu + f(x, model = spde),
data = inla.stack.data(stk_full),
control.predictor = list(compute = TRUE, A = inla.stack.A(stk_full)), verbose = FALSE)
# Retrieve the indexes from the results for which we have the locations to be predicted
index = inla.stack.index(stk_full, tag = 'pred')$data
pred_mean = res$summary.fitted.values[index, 'mean'] # Predicted values for the given locations
INLApred = data.frame(x = coord[, 1], y = coord[, 2], z = pred_mean)
################
# INLA with PS #
################
new_coord = unique(rbind(coord, locations))
mesh = inla.mesh.2d(loc = as.matrix(new_coord),
offset = c(1, 1),
cutoff = 0.25,
max.edge = c(2, 2))
plot(mesh, main = '')
points(locations, col = 'red')
spde = inla.spde2.matern(mesh = mesh, alpha = 2) # alpha = nu + (d / 2)
i_loc = mesh$idx$loc
ig = c(i_loc, rep(NA, nrow(new_coord)))
ip = c(rep(NA, nrow(new_coord)), i_loc)
mu_inla = c(rep(1, nrow(new_coord)), rep(0, nrow(new_coord)))
alpha_inla = c(rep(0, nrow(new_coord)), rep(1, nrow(new_coord)))
y = rep(NA, nrow(new_coord)) # Create an empty vector
samp_rows = row.match(locations, new_coord) # Find the sampling locations in 'new_coord'
y[samp_rows] = Y # Store the observed values in the 'y' vector
y = c(y, rep(NA, nrow(new_coord)))
p = rep(0, nrow(new_coord)) # Create an empty vector
p[samp_rows] = 1 # 'p' stands for points
p = c(rep(NA, nrow(new_coord)), p)
y = matrix(c(y, p), nrow(new_coord) * 2, 2)
data = list(y = y,mu = mu_inla, alpha = alpha_inla, ig = ig, ip = ip)
res = inla(formula = y ~ 0 + mu + alpha + f(ig, model = spde) + f(ip, copy = 'ig', fixed = FALSE),
family = c('gaussian', 'poisson'),
data = data,
control.predictor = list(compute = TRUE, link = 1), verbose = FALSE)
pred_meanPS = res$summary.fitted.values[(1:(nrow(coord))), 'mean']
INLApredPS = data.frame(x = coord[, 1], y = coord[, 2], z = pred_meanPS)
#############################################################################################################################
#############################################################################################################################
##############
# FINAL PLOT #
##############
if(m == 1) {
main = 'Urban backgroud stations'
} else if(m == 2) {
main = 'Urban trafic stations'
} else if(m == 3) {
main = 'Urban industrial stations'
} else if(m == 4) {
main = 'Urban stations'
} else if(m == 5) {
main = 'Rural stations'
} else if(m == 6) {
main = 'All stations'
}
par(mfrow = c(1, 2), mar = c(1, 2, 2, 2) + 0.1,
oma = c(2, 0, 1, 2) + 0.1, family = "LM Roman 10")
breaks = seq(2, 13, by = 0.025)
INLApred_r = rasterFromXYZ(INLApred)
plot(INLApred_r, col = (viridis(440, begin = 0.35, end = 1)), main = paste(main, 'with non-preferential sampling'),
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.875, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(2, 13, 1), labels = seq(2, 13, 1), cex.axis = 1.25))
points(locations)
INLApredPS_r = rasterFromXYZ(INLApredPS)
plot(INLApredPS_r, col = (viridis(440, begin = 0.35, end = 1)), main = paste(main, 'with preferential sampling'),
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.875, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(2, 13, 1), labels = seq(2, 13, 1), cex.axis = 1.25))
points(locations)
if(m == 1) {
INLA_1 = INLApred
INLAPS_1 = INLApredPS
} else if(m == 2) {
INLA_2 = INLApred
INLAPS_2 = INLApredPS
} else if(m == 3) {
INLA_3 = INLApred
INLAPS_3 = INLApredPS
} else if(m == 4) {
INLA_4 = INLApred
INLAPS_4 = INLApredPS
} else if(m == 5) {
INLA_5 = INLApred
INLAPS_5 = INLApredPS
} else if(m == 6) {
INLA_6 = INLApred
INLAPS_6 = INLApredPS
}
}
diff1 = INLAPS_6[, 3] - INLA_4[, 3]
diff2 = INLAPS_6[, 3] - INLAPS_4[, 3]
diff1 = data.frame(x = INLAPS_6[, 1],
y = INLAPS_6[, 2],
z = diff2)
diff2 = data.frame(x = INLAPS_6[, 1],
y = INLAPS_6[, 2],
z = diff3)
rwb = colorRampPalette(colors = c("red", "white", "blue"))
par(mfrow = c(1, 3), mar = c(1, 2, 2, 2) + 0.1,
oma = c(2, 0, 1, 2) + 0.1, family = "LM Roman 10")
breaks = seq(-2.25, 2.25, 0.025)
plot(rasterFromXYZ(diff1), col = (rwb(180)), main = 'Difference between PS (all data) and Nonâ€“PS (urban data)',
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.375, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(-2, 2, 1), labels = seq(-2, 2, 1), cex.axis = 1.25))
points(locations)
plot(rasterFromXYZ(diff2), col = (rwb(180)), main = 'Difference between PS (all data) and PS (urban data)',
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.375, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(-2, 2, 1), labels = seq(-2, 2, 1), cex.axis = 1.25))
points(locations)
diff1 = data.frame(x = INLAPS_6[, 1],
y = INLAPS_6[, 2],
z = diff1)
diff2 = data.frame(x = INLAPS_6[, 1],
y = INLAPS_6[, 2],
z = diff2)
rwb = colorRampPalette(colors = c("red", "white", "blue"))
par(mfrow = c(1, 3), mar = c(1, 2, 2, 2) + 0.1,
oma = c(2, 0, 1, 2) + 0.1, family = "LM Roman 10")
par(mfrow = c(1, 2), mar = c(1, 2, 2, 2) + 0.1,
oma = c(2, 0, 1, 2) + 0.1, family = "LM Roman 10")
breaks = seq(-2.25, 2.25, 0.025)
plot(rasterFromXYZ(diff1), col = (rwb(180)), main = 'Difference between PS (all data) and Nonâ€“PS (urban data)',
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.375, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(-2, 2, 1), labels = seq(-2, 2, 1), cex.axis = 1.25))
points(locations)
par(mfrow = c(1, 2), mar = c(1, 2, 2, 2) + 0.1,
oma = c(2, 0, 1, 2) + 0.1, family = "LM Roman 10")
breaks = seq(-2.25, 2.25, 0.025)
plot(rasterFromXYZ(diff1), col = (rwb(180)), main = 'Difference between PS (all data) and Nonâ€“PS (urban data)',
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.375, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(-2, 2, 1), labels = seq(-2, 2, 1), cex.axis = 1.25))
points(locations)
plot(rasterFromXYZ(diff2), col = (rwb(180)), main = 'Difference between PS (all data) and PS (urban data)',
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.375, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(-2, 2, 1), labels = seq(-2, 2, 1), cex.axis = 1.25))
par(mfrow = c(1, 2), mar = c(1, 2, 2, 2) + 0.1,
oma = c(2, 0, 1, 2) + 0.1, family = "LM Roman 10")
breaks = seq(-2.25, 2.25, 0.025)
plot(rasterFromXYZ(diff1), col = (rwb(180)), main = 'Difference between PS (all data) and Nonâ€“PS (urban data)',
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.375, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(-2, 2, 1), labels = seq(-2, 2, 1), cex.axis = 1.25))
rwb = colorRampPalette(colors = c("red", "white", "blue"))
par(mfrow = c(1, 2), mar = c(1, 2, 2, 2) + 0.1,
oma = c(2, 0, 1, 2) + 0.1, family = "LM Roman 10")
breaks = seq(-2.25, 2.25, 0.025)
plot(rasterFromXYZ(diff1), col = (rwb(180)), main = 'Difference between PS (all data) and Nonâ€“PS (urban data)',
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.375, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(-2, 2, 1), labels = seq(-2, 2, 1), cex.axis = 1.25))
points(locations)
par(mfrow = c(1, 2), mar = c(1, 2, 2, 2) + 0.1,
oma = c(2, 0, 1, 2) + 0.1, family = "LM Roman 10")
breaks = seq(-2.25, 2.25, 0.025)
plot(rasterFromXYZ(diff1), col = (rwb(180)), main = 'Difference between PS (all data) and Nonâ€“PS (urban data)',
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.375, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(-2, 2, 1), labels = seq(-2, 2, 1), cex.axis = 1.25))
points(locations)
plot(rasterFromXYZ(diff2), col = (rwb(180)), main = 'Difference between PS (all data) and PS (urban data)',
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.375, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(-2, 2, 1), labels = seq(-2, 2, 1), cex.axis = 1.25))
diff1
diff2
diff1 = data.frame(x = INLAPS_6[, 1],
y = INLAPS_6[, 2],
z = diff1)
diff2 = data.frame(x = INLAPS_6[, 1],
y = INLAPS_6[, 2],
z = diff2)
rwb = colorRampPalette(colors = c("red", "white", "blue"))
par(mfrow = c(1, 2), mar = c(1, 2, 2, 2) + 0.1,
oma = c(2, 0, 1, 2) + 0.1, family = "LM Roman 10")
breaks = seq(-2.25, 2.25, 0.025)
plot(rasterFromXYZ(diff1), col = (rwb(180)), main = 'Difference between PS (all data) and Nonâ€“PS (urban data)',
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.375, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(-2, 2, 1), labels = seq(-2, 2, 1), cex.axis = 1.25))
points(locations)
plot(rasterFromXYZ(diff2), col = (rwb(180)), main = 'Difference between PS (all data) and PS (urban data)',
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.375, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(-2, 2, 1), labels = seq(-2, 2, 1), cex.axis = 1.25))
points(locations)
plot(rasterFromXYZ(diff2), col = (rwb(180)), main = 'Difference between PS (all data) and PS (urban data)',
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.375, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(-2, 2, 1), labels = seq(-2, 2, 1), cex.axis = 1.25))
points(locations)
plot(rasterFromXYZ(diff2), col = (rwb(180)), main = 'Difference between PS (all data) and PS (urban data)',
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.375, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(-2, 2, 1), labels = seq(-2, 2, 1), cex.axis = 1.25))
points(locations)
plot(rasterFromXYZ(diff1), col = (rwb(180)), main = 'Difference between PS (all data) and Nonâ€“PS (urban data)',
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.375, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(-2, 2, 1), labels = seq(-2, 2, 1), cex.axis = 1.25))
points(locations)
plot(rasterFromXYZ(diff2), col = (rwb(180)), main = 'Difference between PS (all data) and PS (urban data)',
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.375, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(-2, 2, 1), labels = seq(-2, 2, 1), cex.axis = 1.25))
points(locations)
plot(rasterFromXYZ(diff2), col = (rwb(180)), main = 'Difference between PS (all data) and PS (urban data)',
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.375, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(-2, 2, 1), labels = seq(-2, 2, 1), cex.axis = 1.25))
points(locations)
plot(rasterFromXYZ(diff1), col = (rwb(180)), main = 'Difference between PS (all data) and Nonâ€“PS (urban data)',
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.375, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(-2, 2, 1), labels = seq(-2, 2, 1), cex.axis = 1.25))
points(locations)
plot(rasterFromXYZ(diff2), col = (rwb(180)), main = 'Difference between PS (all data) and PS (urban data)',
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.375, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(-2, 2, 1), labels = seq(-2, 2, 1), cex.axis = 1.25))
rasterFromXYZ(diff2)
rwb = colorRampPalette(colors = c("red", "white", "blue"))
par(mfrow = c(1, 2), mar = c(1, 2, 2, 2) + 0.1,
oma = c(2, 0, 1, 2) + 0.1, family = "LM Roman 10")
breaks = seq(-2.25, 2.25, 0.025)
plot(rasterFromXYZ(diff1), col = (rwb(180)), main = 'Difference between PS (all data) and Nonâ€“PS (urban data)',
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.375, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(-2, 2, 1), labels = seq(-2, 2, 1), cex.axis = 1.25))
points(locations)
plot(rasterFromXYZ(diff2), col = (rwb(180)), main = 'Difference between PS (all data) and PS (urban data)',
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.375, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(-2, 2, 1), labels = seq(-2, 2, 1), cex.axis = 1.25))
points(locations)
##############
# FINAL PLOT #
##############
if(m == 1) {
main = 'Urban backgroud stations'
} else if(m == 2) {
main = 'Urban trafic stations'
} else if(m == 3) {
main = 'Urban industrial stations'
} else if(m == 4) {
main = 'Urban stations'
} else if(m == 5) {
main = 'Rural stations'
} else if(m == 6) {
main = 'All stations'
}
par(mfrow = c(1, 2), mar = c(1, 2, 2, 2) + 0.1,
oma = c(2, 0, 1, 2) + 0.1, family = "LM Roman 10")
breaks = seq(2, 13, by = 0.025)
INLApred_r = rasterFromXYZ(INLApred)
plot(INLApred_r, col = (viridis(440, begin = 0.35, end = 1)), main = paste(main, 'with non-preferential sampling'),
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.875, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(2, 13, 1), labels = seq(2, 13, 1), cex.axis = 1.25))
points(locations)
INLApredPS_r = rasterFromXYZ(INLApredPS)
plot(INLApredPS_r, col = (viridis(440, begin = 0.35, end = 1)), main = paste(main, 'with preferential sampling'),
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.875, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(2, 13, 1), labels = seq(2, 13, 1), cex.axis = 1.25))
points(locations)
diff1 = INLAPS_6[, 3] - INLA_4[, 3]
diff2 = INLAPS_6[, 3] - INLAPS_4[, 3]
diff1 = data.frame(x = INLAPS_6[, 1],
y = INLAPS_6[, 2],
z = diff1)
diff2 = data.frame(x = INLAPS_6[, 1],
y = INLAPS_6[, 2],
z = diff2)
rwb = colorRampPalette(colors = c("red", "white", "blue"))
par(mfrow = c(1, 2), mar = c(1, 2, 2, 2) + 0.1,
oma = c(2, 0, 1, 2) + 0.1, family = "LM Roman 10")
breaks = seq(-2.25, 2.25, 0.025)
plot(rasterFromXYZ(diff1), col = (rwb(180)), main = 'Difference between PS (all data) and Nonâ€“PS (urban data)',
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.375, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(-2, 2, 1), labels = seq(-2, 2, 1), cex.axis = 1.25))
points(locations)
plot(rasterFromXYZ(diff2), col = (rwb(180)), main = 'Difference between PS (all data) and PS (urban data)',
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.375, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(-2, 2, 1), labels = seq(-2, 2, 1), cex.axis = 1.25))
points(locations)
bwr = colorRampPalette(colors = c("blue", "white", "red"))
par(mfrow = c(1, 2), mar = c(1, 2, 2, 2) + 0.1,
oma = c(2, 0, 1, 2) + 0.1, family = "LM Roman 10")
breaks = seq(-2.25, 2.25, 0.025)
plot(rasterFromXYZ(diff1), col = (bwr(180)), main = 'Difference between PS (all data) and Nonâ€“PS (urban data)',
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.375, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(-2, 2, 1), labels = seq(-2, 2, 1), cex.axis = 1.25))
points(locations)
plot(rasterFromXYZ(diff2), col = (bwr(180)), main = 'Difference between PS (all data) and PS (urban data)',
xaxt = 'n', yaxt = 'n', breaks = breaks, cex.main = 1.375, legend.width = 2, legend.shrink = 1, axis.args = list(at = seq(-2, 2, 1), labels = seq(-2, 2, 1), cex.axis = 1.25))
points(locations)
