{
    "type": [
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        2
    ],
    "data": [
        "> ",
        "errors <- list()",
        "> ",
        "n=1",
        "> ",
        "  print(paste(\"Simulation: \", sprintf(\"%03d\", n), sep = \"\"))",
        "[1] \"Simulation: 001\"\n",
        "> ",
        "  latt <- data[[n]]$latt",
        "> ",
        "  pref <- data[[n]]$pref",
        "Warning message:\n",
        "Not a validObject(): no slot of name \"srs\" for this object of class \"RasterLayer\" \n",
        "> ",
        "  loct <- data[[n]]$loct",
        "Warning message:\n",
        "Not a validObject(): no slot of name \"srs\" for this object of class \"RasterLayer\" \n",
        "> ",
        "  Yobs <- data[[n]]$Yobs",
        "> ",
        "  orig <- data[[n]]$orig",
        "> ",
        "  alpha <- data[[n]]$alpha",
        "Warning message:\n",
        "Not a validObject(): no slot of name \"srs\" for this object of class \"RasterLayer\" \n",
        "> ",
        "  result <- results[[n]]",
        "> ",
        "  fs_formula <- others[[n]]$fs_formula",
        "> ",
        "  if (fitted_model %in% c(\"const_DP_PS\", \"var_DP_PS\")) { ",
        "+ ",
        "    ",
        "+ ",
        "    idx_int <- inla.stack.index(fs_formula$full_stack, tag = \"pred_pp\")$data",
        "+ ",
        "    fitted_intensity_partial <- exp(result$fit$summary.fitted.values[idx_int, c(\"mean\")])",
        "+ ",
        "    ",
        "+ ",
        "    fitted_intensity <- loct$lambda",
        "+ ",
        "    values(fitted_intensity) <- fitted_intensity_partial",
        "+ ",
        "    ",
        "+ ",
        "    if (normalize) { r <- normalize_function(r1 = loct$lambda, r2 = fitted_intensity); true_intensity <- r[[1]]; fitted_intensity <- r[[2]] }",
        "+ ",
        "    ",
        "+ ",
        "    error_intensity <- MSE(orig = true_intensity, pred = fitted_intensity)",
        "+ ",
        "    print(paste(\"Prediction error (intensity): \", round(x = error_intensity, digits = 4), sep = \"\"))",
        "+ ",
        "    ",
        "+ ",
        "    if (plotting) { plotting_true_fitted(true = true_intensity, fitted = fitted_intensity, title = \"Intensity\", fitted_model = fitted_model) }",
        "+ ",
        "  } else { error_intensity <- NULL }",
        "[1] \"Prediction error (intensity): 8e-04\"\n",
        "> ",
        "  idx_lat <- inla.stack.index(fs_formula$full_stack, tag = \"pred_y\")$data",
        "Warning messages:\n",
        "1: Not a validObject(): no slot of name \"srs\" for this object of class \"RasterLayer\" \n",
        "2: Not a validObject(): no slot of name \"srs\" for this object of class \"RasterLayer\" \n",
        "> ",
        "  fitted_latent_partial <- result$fit$summary.fitted.values[idx_lat, c(\"mean\")]",
        "> ",
        "  fitted_latent <- latt ",
        "> ",
        "  values(fitted_latent) <- fitted_latent_partial",
        "Warning message:\n",
        "Not a validObject(): no slot of name \"srs\" for this object of class \"RasterLayer\" \n",
        "> ",
        "  if (normalize) { r <- normalize_function(r1 = latt, r2 = fitted_latent); true_latent <- r[[1]]; fitted_latent <- r[[2]] }",
        "Warning message:\n",
        "Not a validObject(): no slot of name \"srs\" for this object of class \"RasterLayer\" \n",
        "> ",
        "  error_latent <- MSE(orig = true_latent, pred = fitted_latent)",
        "Warning messages:\n",
        "1: Not a validObject(): no slot of name \"srs\" for this object of class \"RasterLayer\" \n",
        "2: Not a validObject(): no slot of name \"srs\" for this object of class \"RasterLayer\" \n",
        "> ",
        "  print(paste(\"Prediction error: \", round(x = error_latent, digits = 4), sep = \"\"))",
        "[1] \"Prediction error: 0.0877\"\n",
        "> ",
        "  if (plotting) { plotting_true_fitted(true = true_latent, fitted = fitted_latent, title = \"Latent\", fitted_model = fitted_model) }",
        "> ",
        "  coord_pred <- others[[n]]$coord_pred",
        "> ",
        "  bfs_pred <- others[[n]]$bfs_pred",
        "> ",
        "  if (fitted_model == \"var_DP_PS\") {",
        "+ ",
        "    ",
        "+ ",
        "    fitted_preferentiality <- compute_preferentiatility(fit = result$fit, coord_pred = coord_pred, bfs_pred = bfs_pred, xlim = xlim, by = by)",
        "+ ",
        "    ",
        "+ ",
        "    if (normalize) { r <- normalize_function(r1 = pref, r2 = fitted_preferentiality); true_preferentiality <- r[[1]]; fitted_preferentiality <- r[[2]] }",
        "+ ",
        "    ",
        "+ ",
        "    error_preferentiality <- MSE(orig = true_preferentiality, pred = fitted_preferentiality)",
        "+ ",
        "    print(paste(\"Prediction error: \", round(x = error_preferentiality, digits = 4), sep = \"\"))",
        "+ ",
        "    ",
        "+ ",
        "    if (plotting) { plotting_true_fitted(true = true_preferentiality, fitted = fitted_preferentiality, title = \"Preferentiality\", fitted_model = fitted_model) }",
        "+ ",
        "    ",
        "+ ",
        "  } else { error_preferentiality <- NULL }",
        "[1] \"Prediction error: 0.0816\"\n",
        "> ",
        "  errors[[n]] <- list(error_intensity = error_intensity, error_latent = error_latent, error_preferentiality = error_preferentiality)",
        "> ",
        "errors",
        "[[1]]\n[[1]]$error_intensity\n[1] 0.0008444366\n\n[[1]]$error_latent\n[1] 0.08771512\n\n[[1]]$error_preferentiality\n[1] 0.08162906\n\n\n",
        "Warning message:\n",
        "Not a validObject(): no slot of name \"srs\" for this object of class \"RasterLayer\" \n",
        "> ",
        "alpha",
        "[1] 1.575533\n",
        "> ",
        "summary(result$fit)",
        "\nCall:\n   c(\"inla.core(formula = formula, family = family, contrasts = contrasts, \", \" data = data, quantiles = quantiles, E = E, offset = offset, \", \" scale = scale, weights = weights, Ntrials = Ntrials, strata \n   = strata, \", \" lp.scale = lp.scale, link.covariates = link.covariates, verbose = verbose, \", \" lincomb = lincomb, selection = selection, control.compute = control.compute, \", \" control.predictor = \n   control.predictor, control.family = control.family, \", \" control.inla = control.inla, control.fixed = control.fixed, \", \" control.mode = control.mode, control.expert = control.expert, \", \"",
        " \n   control.hazard = control.hazard, control.lincomb = control.lincomb, \", \" control.update = control.update, control.lp.scale = control.lp.scale, \", \" control.pardiso = control.pardiso, only.hyperparam = \n   only.hyperparam, \", \" inla.call = inla.call, inla.arg = inla.arg, num.threads = num.threads, \", \" blas.num.threads = blas.num.threads, keep = keep, working.directory = working.directory, \", \" silent = \n   silent, inla.mode = inla.mode, safe = FALSE, debug = debug, \", \" .parent.frame = .parent.frame)\")",
        " \nTime used:\n    Pre = 5.4, Running = 8.54, Post = 0.398, Total = 14.3 \nFixed effects:\n       mean    sd 0.025quant 0.5quant 0.975quant mode kld\nmu    1.524 0.254      0.973    1.540      1.984   NA   0\nalpha 1.346 0.153      1.017    1.352      1.632   NA   0\n\nRandom effects:\n  Name\t  Model\n    i SPDE2 model\n   j_1 Copy\n   j_2 Copy\n\nModel hyperparameters:\n                                         mean    sd 0.025quant 0.5quant 0.975quant mode\nPrecision for the Gaussian observations 0.980 0.069      0.850    0.978",
        "      1.122   NA\nRange for i                             4.489 0.980      2.941    4.360      6.777   NA\nStdev for i                             0.941 0.143      0.698    0.928      1.260   NA\nBeta for j_1                            0.396 0.091      0.217    0.396      0.576   NA\nBeta for j_2                            0.779 0.085      0.613    0.779      0.949   NA\n\nMarginal log-Likelihood:  -430.28 \n is computed \nPosterior summaries for the linear predictor and the fitted values are computed\n(Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')\n\n",
        "> ",
        "n = 2",
        "> ",
        "  latt <- data[[n]]$latt",
        "> ",
        "  pref <- data[[n]]$pref",
        "Warning message:\n",
        "Not a validObject(): no slot of name \"srs\" for this object of class \"RasterLayer\" \n",
        "> ",
        "  loct <- data[[n]]$loct",
        "Warning message:\n",
        "Not a validObject(): no slot of name \"srs\" for this object of class \"RasterLayer\" \n",
        "> ",
        "  Yobs <- data[[n]]$Yobs",
        "> ",
        "  orig <- data[[n]]$orig",
        "> ",
        "  alpha <- data[[n]]$alpha",
        "Warning message:\n",
        "Not a validObject(): no slot of name \"srs\" for this object of class \"RasterLayer\" \n",
        "> ",
        "alpha",
        "[1] 0.7191189\n",
        "> ",
        "  result <- results[[n]]",
        "> ",
        "  fs_formula <- others[[n]]$fs_formula",
        "> ",
        "  if (fitted_model %in% c(\"const_DP_PS\", \"var_DP_PS\")) { ",
        "+ ",
        "    ",
        "+ ",
        "    idx_int <- inla.stack.index(fs_formula$full_stack, tag = \"pred_pp\")$data",
        "+ ",
        "    fitted_intensity_partial <- exp(result$fit$summary.fitted.values[idx_int, c(\"mean\")])",
        "+ ",
        "    ",
        "+ ",
        "    fitted_intensity <- loct$lambda",
        "+ ",
        "    values(fitted_intensity) <- fitted_intensity_partial",
        "+ ",
        "    ",
        "+ ",
        "    if (normalize) { r <- normalize_function(r1 = loct$lambda, r2 = fitted_intensity); true_intensity <- r[[1]]; fitted_intensity <- r[[2]] }",
        "+ ",
        "    ",
        "+ ",
        "    error_intensity <- MSE(orig = true_intensity, pred = fitted_intensity)",
        "+ ",
        "    print(paste(\"Prediction error (intensity): \", round(x = error_intensity, digits = 4), sep = \"\"))",
        "+ ",
        "    ",
        "+ ",
        "    if (plotting) { plotting_true_fitted(true = true_intensity, fitted = fitted_intensity, title = \"Intensity\", fitted_model = fitted_model) }",
        "+ ",
        "  } else { error_intensity <- NULL }",
        "[1] \"Prediction error (intensity): 0.0011\"\n",
        "> ",
        "  idx_lat <- inla.stack.index(fs_formula$full_stack, tag = \"pred_y\")$data",
        "> ",
        "  fitted_latent_partial <- result$fit$summary.fitted.values[idx_lat, c(\"mean\")]",
        "> ",
        "  fitted_latent <- latt ",
        "Warning messages:\n",
        "1: Not a validObject(): no slot of name \"srs\" for this object of class \"RasterLayer\" \n",
        "2: Not a validObject(): no slot of name \"srs\" for this object of class \"RasterLayer\" \n",
        "> ",
        "  values(fitted_latent) <- fitted_latent_partial",
        "Warning message:\n",
        "Not a validObject(): no slot of name \"srs\" for this object of class \"RasterLayer\" \n",
        "> ",
        "  if (normalize) { r <- normalize_function(r1 = latt, r2 = fitted_latent); true_latent <- r[[1]]; fitted_latent <- r[[2]] }",
        "Warning message:\n",
        "Not a validObject(): no slot of name \"srs\" for this object of class \"RasterLayer\" \n",
        "> ",
        "  error_latent <- MSE(orig = true_latent, pred = fitted_latent)",
        "Warning messages:\n",
        "1: Not a validObject(): no slot of name \"srs\" for this object of class \"RasterLayer\" \n",
        "2: Not a validObject(): no slot of name \"srs\" for this object of class \"RasterLayer\" \n",
        "> ",
        "  print(paste(\"Prediction error: \", round(x = error_latent, digits = 4), sep = \"\"))",
        "[1] \"Prediction error: 0.0842\"\n",
        "> ",
        "  if (plotting) { plotting_true_fitted(true = true_latent, fitted = fitted_latent, title = \"Latent\", fitted_model = fitted_model) }",
        "> ",
        "  coord_pred <- others[[n]]$coord_pred",
        "> ",
        "  bfs_pred <- others[[n]]$bfs_pred",
        "> ",
        "  if (fitted_model == \"var_DP_PS\") {",
        "+ ",
        "    ",
        "+ ",
        "    fitted_preferentiality <- compute_preferentiatility(fit = result$fit, coord_pred = coord_pred, bfs_pred = bfs_pred, xlim = xlim, by = by)",
        "+ ",
        "    ",
        "+ ",
        "    if (normalize) { r <- normalize_function(r1 = pref, r2 = fitted_preferentiality); true_preferentiality <- r[[1]]; fitted_preferentiality <- r[[2]] }",
        "+ ",
        "    ",
        "+ ",
        "    error_preferentiality <- MSE(orig = true_preferentiality, pred = fitted_preferentiality)",
        "+ ",
        "    print(paste(\"Prediction error: \", round(x = error_preferentiality, digits = 4), sep = \"\"))",
        "+ ",
        "    ",
        "+ ",
        "    if (plotting) { plotting_true_fitted(true = true_preferentiality, fitted = fitted_preferentiality, title = \"Preferentiality\", fitted_model = fitted_model) }",
        "+ ",
        "    ",
        "+ ",
        "  } else { error_preferentiality <- NULL }",
        "[1] \"Prediction error: 0.0189\"\n",
        "> ",
        "  errors[[n]] <- list(error_intensity = error_intensity, error_latent = error_latent, error_preferentiality = error_preferentiality)",
        "> ",
        "errors",
        "[[1]]\n[[1]]$error_intensity\n[1] 0.0008444366\n\n[[1]]$error_latent\n[1] 0.08771512\n\n[[1]]$error_preferentiality\n[1] 0.08162906\n\n\n[[2]]\n[[2]]$error_intensity\n[1] 0.001129679\n\n[[2]]$error_latent\n[1] 0.0841707\n\n[[2]]$error_preferentiality\n[1] 0.01888979\n\n\n",
        "Warning message:\n",
        "Not a validObject(): no slot of name \"srs\" for this object of class \"RasterLayer\" \n",
        "> ",
        "scenario         <- 3",
        "> ",
        "sample_size      <- 500",
        "> ",
        "smoothing_kernel <- \"partition\"",
        "> ",
        "partition_const  <- \"non_constant\"",
        "> ",
        "n_center_points  <- \"many\"",
        "> ",
        "fitted_model     <- \"var_DP_PS\" # \"non_PS\", \"const_DP_PS\", and \"var_DP_PS\"",
        "> ",
        "",
        "> ",
        "source(\"header.R\")",
        "> ",
        "source(\"functions_data_generation.R\")",
        "> ",
        "source(\"functions_model_fitting.R\")",
        "> ",
        "source(\"functions_result_processing.R\")",
        "> ",
        "source(\"functions_aux.R\")",
        "> ",
        "",
        "> ",
        "normalize_function <- function (r1, r2, ...) {",
        "+ ",
        "  mm <- max(c(values(r1), values(r2)))",
        "+ ",
        "  mn <- min(c(values(r1), values(r2)))",
        "+ ",
        "  values(r1) <- (values(r1) - mn) / (mm - mn)",
        "+ ",
        "  values(r2) <- (values(r2) - mn) / (mm - mn)",
        "+ ",
        "  ",
        "+ ",
        "  list(r1, r2)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "plotting_true_fitted <- function (true, fitted, title = \"Latent\", fitted_model = \"non_PS\", ...) {",
        "+ ",
        "  par(mfrow = c(1, 2)); ",
        "+ ",
        "  len  <- 199",
        "+ ",
        "  brks <- round(seq(from = 0, to = 1, length.out = len), 9)",
        "+ ",
        "  arg  <- list(at = seq(from = 0, to = 1, length.out = 5), labels = round(seq(from = 0, to = 1, length.out = 5), digits = 2)) ",
        "+ ",
        "  plot(true,   breaks = brks, col = rainbow(n = len, start = 0.05, end = 0.85), axis.arg = arg, main = paste(\"Original \", title, \" Process\", sep = \"\"))",
        "+ ",
        "  plot(fitted, breaks = brks, col = rainbow(n = len, start = 0.05, end = 0.85), axis.arg = arg, main = paste(\"Estimated \", title, \" Process (\", fitted_model, \")\", sep = \"\"))",
        "+ ",
        "  par(mfrow = c(1, 1))",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "set.seed(1)",
        "> ",
        "",
        "> ",
        "##################################################",
        "> ",
        "# Initial parameters",
        "> ",
        "##################################################",
        "> ",
        "xlim <- c(0, 10)",
        "> ",
        "ylim <- c(0, 10)",
        "> ",
        "by <- 0.05",
        "> ",
        "mu <- 2",
        "> ",
        "nu <- 1",
        "> ",
        "scl <- 2",
        "> ",
        "sig2 <- 1",
        "> ",
        "sig2_error <- 1",
        "> ",
        "",
        "> ",
        "n_points <- NULL",
        "> ",
        "pref_sampling <- TRUE",
        "> ",
        "",
        "> ",
        "NS <- FALSE",
        "> ",
        "normalize <- TRUE",
        "> ",
        "plotting <- TRUE",
        "> ",
        "##################################################",
        "> ",
        "",
        "> ",
        "N_sim <- 125",
        "> ",
        "",
        "> ",
        "data <- readRDS(file = paste(\"DATA/\", sprintf(\"%02d\", scenario), \"/\", sample_size, \".rds\", sep = \"\"))",
        "> ",
        "results <- readRDS(file = paste(\"FITTED_MODELS/\", sprintf(\"%02d\", scenario), \"/\", fitted_model, \"-\", smoothing_kernel, \"-\", partition_const, \"-\", n_center_points, \"-\", sample_size, \".rds\", sep = \"\"))",
        "> ",
        "others <- readRDS(file = paste(\"FITTED_MODELS/\", sprintf(\"%02d\", scenario), \"/OTHERS/\", fitted_model, \"-\", smoothing_kernel, \"-\", partition_const, \"-\", n_center_points, \"-\", sample_size, \".rds\", sep = \"\"))",
        "> ",
        "",
        "> ",
        "##################################################",
        "> ",
        "",
        "> ",
        "N_models <- 100",
        "> ",
        "failed_models <- rep(x = 0, times = N_sim)",
        "> ",
        "for (n in 1:N_sim) { failed_models[n] <- ifelse(test = !results[[n]]$fit$ok, yes = 1, no = 0) }",
        "> ",
        "idxs <- which(failed_models == 0)",
        "> ",
        "if (length(idxs) >= N_models) { idxs <- idxs[1:N_models] } else { stop(paste(\"Less than \", N_models , \" successfully fitted models.\", sep = \"\")) }",
        "> ",
        "",
        "> ",
        "data <- data[idxs]",
        "> ",
        "results <- results[idxs]",
        "> ",
        "others <- others[idxs]",
        "> ",
        "",
        "> ",
        "##################################################",
        "> ",
        "",
        "> ",
        "errors <- list()",
        "> ",
        "for (n in 1:N_models) {",
        "+ ",
        "  print(paste(\"Simulation: \", sprintf(\"%03d\", n), sep = \"\"))",
        "+ ",
        "  ",
        "+ ",
        "  latt <- data[[n]]$latt",
        "+ ",
        "  pref <- data[[n]]$pref",
        "+ ",
        "  loct <- data[[n]]$loct",
        "+ ",
        "  Yobs <- data[[n]]$Yobs",
        "+ ",
        "  orig <- data[[n]]$orig",
        "+ ",
        "  ",
        "+ ",
        "  alpha <- data[[n]]$alpha",
        "+ ",
        "  ",
        "+ ",
        "  result <- results[[n]]",
        "+ ",
        "  fs_formula <- others[[n]]$fs_formula",
        "+ ",
        "  ",
        "+ ",
        "  ##############################",
        "+ ",
        "  # Intensity Process",
        "+ ",
        "  ##############################",
        "+ ",
        "  ",
        "+ ",
        "  if (fitted_model %in% c(\"const_DP_PS\", \"var_DP_PS\")) { ",
        "+ ",
        "    ",
        "+ ",
        "    idx_int <- inla.stack.index(fs_formula$full_stack, tag = \"pred_pp\")$data",
        "+ ",
        "    fitted_intensity_partial <- exp(result$fit$summary.fitted.values[idx_int, c(\"mean\")])",
        "+ ",
        "    ",
        "+ ",
        "    fitted_intensity <- loct$lambda",
        "+ ",
        "    values(fitted_intensity) <- fitted_intensity_partial",
        "+ ",
        "    ",
        "+ ",
        "    if (normalize) { r <- normalize_function(r1 = loct$lambda, r2 = fitted_intensity); true_intensity <- r[[1]]; fitted_intensity <- r[[2]] }",
        "+ ",
        "    ",
        "+ ",
        "    error_intensity <- MSE(orig = true_intensity, pred = fitted_intensity)",
        "+ ",
        "    print(paste(\"Prediction error (intensity): \", round(x = error_intensity, digits = 4), sep = \"\"))",
        "+ ",
        "    ",
        "+ ",
        "    if (plotting) { plotting_true_fitted(true = true_intensity, fitted = fitted_intensity, title = \"Intensity\", fitted_model = fitted_model) }",
        "+ ",
        "  } else { error_intensity <- NULL }",
        "+ ",
        "  ",
        "+ ",
        "  ##############################",
        "+ ",
        "  # Latent Process",
        "+ ",
        "  ##############################",
        "+ ",
        "  ",
        "+ ",
        "  idx_lat <- inla.stack.index(fs_formula$full_stack, tag = \"pred_y\")$data",
        "+ ",
        "  fitted_latent_partial <- result$fit$summary.fitted.values[idx_lat, c(\"mean\")]",
        "+ ",
        "  ",
        "+ ",
        "  fitted_latent <- latt ",
        "+ ",
        "  values(fitted_latent) <- fitted_latent_partial",
        "+ ",
        "  ",
        "+ ",
        "  if (normalize) { r <- normalize_function(r1 = latt, r2 = fitted_latent); true_latent <- r[[1]]; fitted_latent <- r[[2]] }",
        "+ ",
        "  ",
        "+ ",
        "  error_latent <- MSE(orig = true_latent, pred = fitted_latent)",
        "+ ",
        "  print(paste(\"Prediction error: \", round(x = error_latent, digits = 4), sep = \"\"))",
        "+ ",
        "  ",
        "+ ",
        "  if (plotting) { plotting_true_fitted(true = true_latent, fitted = fitted_latent, title = \"Latent\", fitted_model = fitted_model) }",
        "+ ",
        "",
        "+ ",
        "  ##############################",
        "+ ",
        "  # Preferentiality Process",
        "+ ",
        "  ##############################",
        "+ ",
        "  ",
        "+ ",
        "  coord_pred <- others[[n]]$coord_pred",
        "+ ",
        "  bfs_pred <- others[[n]]$bfs_pred",
        "+ ",
        "  ",
        "+ ",
        "  if (fitted_model == \"var_DP_PS\") {",
        "+ ",
        "    ",
        "+ ",
        "    fitted_preferentiality <- compute_preferentiatility(fit = result$fit, coord_pred = coord_pred, bfs_pred = bfs_pred, xlim = xlim, by = by)",
        "+ ",
        "    ",
        "+ ",
        "    if (normalize) { r <- normalize_function(r1 = pref, r2 = fitted_preferentiality); true_preferentiality <- r[[1]]; fitted_preferentiality <- r[[2]] }",
        "+ ",
        "    ",
        "+ ",
        "    error_preferentiality <- MSE(orig = true_preferentiality, pred = fitted_preferentiality)",
        "+ ",
        "    print(paste(\"Prediction error: \", round(x = error_preferentiality, digits = 4), sep = \"\"))",
        "+ ",
        "    ",
        "+ ",
        "    if (plotting) { plotting_true_fitted(true = true_preferentiality, fitted = fitted_preferentiality, title = \"Preferentiality\", fitted_model = fitted_model) }",
        "+ ",
        "    ",
        "+ ",
        "  } else { error_preferentiality <- NULL }",
        "+ ",
        "  ",
        "+ ",
        "  ##############################",
        "+ ",
        "  ##############################",
        "+ ",
        "  ",
        "+ ",
        "  errors[[n]] <- list(error_intensity = error_intensity, error_latent = error_latent, error_preferentiality = error_preferentiality)",
        "+ ",
        "}",
        "[1] \"Simulation: 001\"\n[1] \"Prediction error (intensity): 8e-04\"\n[1] \"Prediction error: 0.0877\"\n[1] \"Prediction error: 0.0816\"\n[1] \"Simulation: 002\"\n[1] \"Prediction error (intensity): 0.0011\"\n[1] \"Prediction error: 0.0842\"\n[1] \"Prediction error: 0.0189\"\n[1] \"Simulation: 003\"\n[1] \"Prediction error (intensity): 0.0024\"\n[1] \"Prediction error: 0.0914\"\n[1] \"Prediction error: 0.0065\"\n[1] \"Simulation: 004\"\n[1] \"Prediction error (intensity): 0.0042\"\n[1] \"Prediction error: 0.0792\"\n[1] \"Prediction error: 0.1483\"\n[1] \"Simulation: 005\"",
        "\n[1] \"Prediction error (intensity): 0.0127\"\n[1] \"Prediction error: 0.2888\"\n[1] \"Prediction error: 0.5896\"\n[1] \"Simulation: 006\"\n[1] \"Prediction error (intensity): 0.0047\"\n[1] \"Prediction error: 0.0881\"\n[1] \"Prediction error: 0.0405\"\n[1] \"Simulation: 007\"\n[1] \"Prediction error (intensity): 0.0129\"\n[1] \"Prediction error: 0.2793\"\n[1] \"Prediction error: 0.5134\"\n[1] \"Simulation: 008\"\n[1] \"Prediction error (intensity): 0.0021\"\n[1] \"Prediction error: 0.0852\"\n[1] \"Prediction error: 0.1203\"\n[1] \"Simulation: 009\"\n[1]",
        " \"Prediction error (intensity): 0.0115\"\n[1] \"Prediction error: 0.3174\"\n[1] \"Prediction error: 0.63\"\n[1] \"Simulation: 010\"\n[1] \"Prediction error (intensity): 0.0156\"\n[1] \"Prediction error: 0.2409\"\n[1] \"Prediction error: 0.6305\"\n[1] \"Simulation: 011\"\n[1] \"Prediction error (intensity): 0.0037\"\n[1] \"Prediction error: 0.1138\"\n[1] \"Prediction error: 0.0181\"\n[1] \"Simulation: 012\"\n[1] \"Prediction error (intensity): 0.0033\"\n[1] \"Prediction error: 0.1296\"\n[1] \"Prediction error: 0.051\"\n[1] \"Simulation: 013\"\n[1] \"Prediction error (intensity): 0.0013\"",
        "\n[1] \"Prediction error: 0.094\"\n[1] \"Prediction error: 0.0124\"\n[1] \"Simulation: 014\"\n[1] \"Prediction error (intensity): 0.0088\"\n[1] \"Prediction error: 0.2452\"\n[1] \"Prediction error: 0.5836\"\n[1] \"Simulation: 015\"\n[1] \"Prediction error (intensity): 0.0016\"\n[1] \"Prediction error: 0.1081\"\n[1] \"Prediction error: 0.0075\"\n[1] \"Simulation: 016\"\n[1] \"Prediction error (intensity): 0.0025\"\n[1] \"Prediction error: 0.0823\"\n[1] \"Prediction error: 0.0866\"\n[1] \"Simulation: 017\"\n[1] \"Prediction error (intensity): 0.0056\"\n[1] \"Prediction error: 0.122\"",
        "\n[1] \"Prediction error: 0.1064\"\n[1] \"Simulation: 018\"\n[1] \"Prediction error (intensity): 0.0027\"\n[1] \"Prediction error: 0.1018\"\n[1] \"Prediction error: 0.0268\"\n[1] \"Simulation: 019\"\n[1] \"Prediction error (intensity): 0.0039\"\n[1] \"Prediction error: 0.0884\"\n[1] \"Prediction error: 0.0757\"\n[1] \"Simulation: 020\"\n[1] \"Prediction error (intensity): 0.006\"\n[1] \"Prediction error: 0.1999\"\n[1] \"Prediction error: 0.694\"\n[1] \"Simulation: 021\"\n[1] \"Prediction error (intensity): 0.0059\"\n[1] \"Prediction error: 0.1049\"\n[1] \"Prediction error: 0.0649\"",
        "\n[1] \"Simulation: 022\"\n[1] \"Prediction error (intensity): 0.0039\"\n[1] \"Prediction error: 0.1202\"\n[1] \"Prediction error: 0.0487\"\n[1] \"Simulation: 023\"\n[1] \"Prediction error (intensity): 0.009\"\n[1] \"Prediction error: 0.2683\"\n[1] \"Prediction error: 0.6047\"\n[1] \"Simulation: 024\"\n[1] \"Prediction error (intensity): 0.0221\"\n[1] \"Prediction error: 0.2725\"\n[1] \"Prediction error: 0.4422\"\n[1] \"Simulation: 025\"\n[1] \"Prediction error (intensity): 0.0135\"\n[1] \"Prediction error: 0.2529\"\n[1] \"Prediction error: 0.6666\"\n[1] \"Simulation: 026\"",
        "\n[1] \"Prediction error (intensity): 0.0024\"\n[1] \"Prediction error: 0.0923\"\n[1] \"Prediction error: 0.0534\"\n[1] \"Simulation: 027\"\n[1] \"Prediction error (intensity): 0.0013\"\n[1] \"Prediction error: 0.1019\"\n[1] \"Prediction error: 0.0297\"\n[1] \"Simulation: 028\"\n[1] \"Prediction error (intensity): 0.0126\"\n[1] \"Prediction error: 0.3427\"\n[1] \"Prediction error: 0.5649\"\n[1] \"Simulation: 029\"\n[1] \"Prediction error (intensity): 0.0011\"\n[1] \"Prediction error: 0.0846\"\n[1] \"Prediction error: 0.0657\"\n[1] \"Simulation: 030\"\n[1]",
        " \"Prediction error (intensity): 0.0036\"\n[1] \"Prediction error: 0.1314\"\n[1] \"Prediction error: 0.0761\"\n[1] \"Simulation: 031\"\n[1] \"Prediction error (intensity): 0.017\"\n[1] \"Prediction error: 0.2919\"\n[1] \"Prediction error: 0.121\"\n[1] \"Simulation: 032\"\n[1] \"Prediction error (intensity): 0.0057\"\n[1] \"Prediction error: 0.1113\"\n[1] \"Prediction error: 0.0199\"\n[1] \"Simulation: 033\"\n[1] \"Prediction error (intensity): 0.0028\"\n[1] \"Prediction error: 0.0987\"\n[1] \"Prediction error: 0.0342\"\n[1] \"Simulation: 034\"\n[1] \"Prediction error (intensity): 0.0078\"",
        "\n[1] \"Prediction error: 0.3519\"\n[1] \"Prediction error: 0.5058\"\n[1] \"Simulation: 035\"\n[1] \"Prediction error (intensity): 0.0031\"\n[1] \"Prediction error: 0.0649\"\n[1] \"Prediction error: 0.2576\"\n[1] \"Simulation: 036\"\n[1] \"Prediction error (intensity): 0.0017\"\n[1] \"Prediction error: 0.0966\"\n[1] \"Prediction error: 0.0409\"\n[1] \"Simulation: 037\"\n[1] \"Prediction error (intensity): 0.0017\"\n[1] \"Prediction error: 0.0937\"\n[1] \"Prediction error: 0.0766\"\n[1] \"Simulation: 038\"\n[1] \"Prediction error (intensity): 0.0172\"\n[1]",
        " \"Prediction error: 0.2851\"\n[1] \"Prediction error: 0.1936\"\n[1] \"Simulation: 039\"\n[1] \"Prediction error (intensity): 0.003\"\n[1] \"Prediction error: 0.0658\"\n[1] \"Prediction error: 0.0578\"\n[1] \"Simulation: 040\"\n[1] \"Prediction error (intensity): 0.0039\"\n[1] \"Prediction error: 0.1066\"\n[1] \"Prediction error: 0.1132\"\n[1] \"Simulation: 041\"\n[1] \"Prediction error (intensity): 0.0022\"\n[1] \"Prediction error: 0.0806\"\n[1] \"Prediction error: 0.057\"\n[1] \"Simulation: 042\"\n[1] \"Prediction error (intensity): 0.002\"\n[1] \"Prediction error: 0.0775\"",
        "\n[1] \"Prediction error: 0.0594\"\n[1] \"Simulation: 043\"\n[1] \"Prediction error (intensity): 0.0048\"\n[1] \"Prediction error: 0.1138\"\n[1] \"Prediction error: 0.0829\"\n[1] \"Simulation: 044\"\n[1] \"Prediction error (intensity): 0.0123\"\n[1] \"Prediction error: 0.1731\"\n[1] \"Prediction error: 0.5695\"\n[1] \"Simulation: 045\"\n[1] \"Prediction error (intensity): 9e-04\"\n[1] \"Prediction error: 0.0839\"\n[1] \"Prediction error: 0.0132\"\n[1] \"Simulation: 046\"\n[1] \"Prediction error (intensity): 0.0111\"\n[1] \"Prediction error: 0.2613\"\n[1] \"Prediction error: 0.4613\"",
        "\n[1] \"Simulation: 047\"\n[1] \"Prediction error (intensity): 0.0046\"\n[1] \"Prediction error: 0.1048\"\n[1] \"Prediction error: 0.2166\"\n[1] \"Simulation: 048\"\n[1] \"Prediction error (intensity): 9e-04\"\n[1] \"Prediction error: 0.0731\"\n[1] \"Prediction error: 0.1023\"\n[1] \"Simulation: 049\"\n[1] \"Prediction error (intensity): 0.0024\"\n[1] \"Prediction error: 0.1396\"\n[1] \"Prediction error: 0.0797\"\n[1] \"Simulation: 050\"\n[1] \"Prediction error (intensity): 0.0049\"\n[1] \"Prediction error: 0.2784\"\n[1] \"Prediction error: 0.6773\"\n[1] \"Simulation: 051\"",
        "\n[1] \"Prediction error (intensity): 0.0025\"\n[1] \"Prediction error: 0.0935\"\n[1] \"Prediction error: 0.0509\"\n[1] \"Simulation: 052\"\n[1] \"Prediction error (intensity): 0.003\"\n[1] \"Prediction error: 0.076\"\n[1] \"Prediction error: 0.0944\"\n[1] \"Simulation: 053\"\n[1] \"Prediction error (intensity): 0.0052\"\n[1] \"Prediction error: 0.0621\"\n[1] \"Prediction error: 0.0455\"\n[1] \"Simulation: 054\"\n[1] \"Prediction error (intensity): 0.0018\"\n[1] \"Prediction error: 0.1259\"\n[1] \"Prediction error: 0.0085\"\n[1] \"Simulation: 055\"\n[1] \"Prediction error (intensity): 0.0172\"",
        "\n[1] \"Prediction error: 0.3544\"\n[1] \"Prediction error: 0.625\"\n[1] \"Simulation: 056\"\n[1] \"Prediction error (intensity): 0.003\"\n[1] \"Prediction error: 0.1121\"\n[1] \"Prediction error: 0.033\"\n[1] \"Simulation: 057\"\n[1] \"Prediction error (intensity): 8e-04\"\n[1] \"Prediction error: 0.0862\"\n[1] \"Prediction error: 0.0363\"\n[1] \"Simulation: 058\"\n[1] \"Prediction error (intensity): 0.0038\"\n[1] \"Prediction error: 0.1074\"\n[1] \"Prediction error: 0.0591\"\n[1] \"Simulation: 059\"\n[1] \"Prediction error (intensity): 0.0118\"\n[1] \"Prediction error: 0.2399\"",
        "\n[1] \"Prediction error: 0.6972\"\n[1] \"Simulation: 060\"\n[1] \"Prediction error (intensity): 0.0017\"\n[1] \"Prediction error: 0.0777\"\n[1] \"Prediction error: 0.0623\"\n[1] \"Simulation: 061\"\n[1] \"Prediction error (intensity): 0.0093\"\n[1] \"Prediction error: 0.2322\"\n[1] \"Prediction error: 0.5938\"\n[1] \"Simulation: 062\"\n[1] \"Prediction error (intensity): 0.0053\"\n[1] \"Prediction error: 0.1338\"\n[1] \"Prediction error: 0.0245\"\n[1] \"Simulation: 063\"\n[1] \"Prediction error (intensity): 9e-04\"\n[1] \"Prediction error: 0.0852\"\n[1] \"Prediction error: 0.046\"",
        "\n[1] \"Simulation: 064\"\n[1] \"Prediction error (intensity): 0.0032\"\n[1] \"Prediction error: 0.0928\"\n[1] \"Prediction error: 0.0746\"\n[1] \"Simulation: 065\"\n[1] \"Prediction error (intensity): 0.019\"\n[1] \"Prediction error: 0.1933\"\n[1] \"Prediction error: 0.7888\"\n[1] \"Simulation: 066\"\n[1] \"Prediction error (intensity): 0.0035\"\n[1] \"Prediction error: 0.1113\"\n[1] \"Prediction error: 0.0574\"\n[1] \"Simulation: 067\"\n[1] \"Prediction error (intensity): 0.009\"\n[1] \"Prediction error: 0.3059\"\n[1] \"Prediction error: 0.7541\"\n[1] \"Simulation: 068\"",
        "\n[1] \"Prediction error (intensity): 0.0012\"\n[1] \"Prediction error: 0.0805\"\n[1] \"Prediction error: 0.0235\"\n[1] \"Simulation: 069\"\n[1] \"Prediction error (intensity): 0.0025\"\n[1] \"Prediction error: 0.1099\"\n[1] \"Prediction error: 0.0262\"\n[1] \"Simulation: 070\"\n[1] \"Prediction error (intensity): 0.0043\"\n[1] \"Prediction error: 0.1073\"\n[1] \"Prediction error: 0.0643\"\n[1] \"Simulation: 071\"\n[1] \"Prediction error (intensity): 0.0033\"\n[1] \"Prediction error: 0.106\"\n[1] \"Prediction error: 0.1096\"\n[1] \"Simulation: 072\"\n[1] \"Prediction error (intensity): 0.001\"",
        "\n[1] \"Prediction error: 0.0829\"\n[1] \"Prediction error: 0.0363\"\n[1] \"Simulation: 073\"\n[1] \"Prediction error (intensity): 0.0033\"\n[1] \"Prediction error: 0.0806\"\n[1] \"Prediction error: 0.0663\"\n[1] \"Simulation: 074\"\n[1] \"Prediction error (intensity): 0.0049\"\n[1] \"Prediction error: 0.1281\"\n[1] \"Prediction error: 0.0892\"\n[1] \"Simulation: 075\"\n[1] \"Prediction error (intensity): 0.0014\"\n[1] \"Prediction error: 0.1025\"\n[1] \"Prediction error: 0.0224\"\n[1] \"Simulation: 076\"\n[1] \"Prediction error (intensity): 3e-04\"\n[1] \"Prediction error: 0.0508\"",
        "\n[1] \"Prediction error: 0.0181\"\n[1] \"Simulation: 077\"\n[1] \"Prediction error (intensity): 0.0024\"\n[1] \"Prediction error: 0.1016\"\n[1] \"Prediction error: 0.0963\"\n[1] \"Simulation: 078\"\n[1] \"Prediction error (intensity): 0.0012\"\n[1] \"Prediction error: 0.0996\"\n[1] \"Prediction error: 0.0459\"\n[1] \"Simulation: 079\"\n[1] \"Prediction error (intensity): 0.0029\"\n[1] \"Prediction error: 0.0935\"\n[1] \"Prediction error: 0.0505\"\n[1] \"Simulation: 080\"\n[1] \"Prediction error (intensity): 0.0022\"\n[1] \"Prediction error: 0.1075\"\n[1]",
        " \"Prediction error: 0.0523\"\n[1] \"Simulation: 081\"\n[1] \"Prediction error (intensity): 0.0185\"\n[1] \"Prediction error: 0.2755\"\n[1] \"Prediction error: 0.5467\"\n[1] \"Simulation: 082\"\n[1] \"Prediction error (intensity): 0.0015\"\n[1] \"Prediction error: 0.13\"\n[1] \"Prediction error: 0.046\"\n[1] \"Simulation: 083\"\n[1] \"Prediction error (intensity): 0.0012\"\n[1] \"Prediction error: 0.0723\"\n[1] \"Prediction error: 0.0065\"\n[1] \"Simulation: 084\"\n[1] \"Prediction error (intensity): 0.0065\"\n[1] \"Prediction error: 0.1454\"\n[1] \"Prediction error: 0.1159\"",
        "\n[1] \"Simulation: 085\"\n[1] \"Prediction error (intensity): 0.0045\"\n[1] \"Prediction error: 0.0903\"\n[1] \"Prediction error: 0.0634\"\n[1] \"Simulation: 086\"\n[1] \"Prediction error (intensity): 0.001\"\n[1] \"Prediction error: 0.068\"\n[1] \"Prediction error: 0.043\"\n[1] \"Simulation: 087\"\n[1] \"Prediction error (intensity): 0.0024\"\n[1] \"Prediction error: 0.1261\"\n[1] \"Prediction error: 0.0412\"\n[1] \"Simulation: 088\"\n[1] \"Prediction error (intensity): 0.002\"\n[1] \"Prediction error: 0.1066\"\n[1] \"Prediction error: 0.0231\"\n[1] \"Simulation: 089\"",
        "\n[1] \"Prediction error (intensity): 0.002\"\n[1] \"Prediction error: 0.1066\"\n[1] \"Prediction error: 0.0891\"\n[1] \"Simulation: 090\"\n[1] \"Prediction error (intensity): 0.0094\"\n[1] \"Prediction error: 0.3327\"\n[1] \"Prediction error: 0.5452\"\n[1] \"Simulation: 091\"\n[1] \"Prediction error (intensity): 0.0021\"\n[1] \"Prediction error: 0.1322\"\n[1] \"Prediction error: 0.0455\"\n[1] \"Simulation: 092\"\n[1] \"Prediction error (intensity): 0.0165\"\n[1] \"Prediction error: 0.2923\"\n[1] \"Prediction error: 0.5953\"\n[1] \"Simulation: 093\"\n[1] \"Prediction error (intensity): 0.0113\"",
        "\n[1] \"Prediction error: 0.2435\"\n[1] \"Prediction error: 0.5937\"\n[1] \"Simulation: 094\"\n[1] \"Prediction error (intensity): 0.0012\"\n[1] \"Prediction error: 0.1008\"\n[1] \"Prediction error: 0.0195\"\n[1] \"Simulation: 095\"\n[1] \"Prediction error (intensity): 0.0087\"\n[1] \"Prediction error: 0.3029\"\n[1] \"Prediction error: 0.6695\"\n[1] \"Simulation: 096\"\n[1] \"Prediction error (intensity): 0.0016\"\n[1] \"Prediction error: 0.0671\"\n[1] \"Prediction error: 0.0128\"\n[1] \"Simulation: 097\"\n[1] \"Prediction error (intensity): 0.0034\"\n[1]",
        " \"Prediction error: 0.0944\"\n[1] \"Prediction error: 0.0055\"\n[1] \"Simulation: 098\"\n[1] \"Prediction error (intensity): 0.0039\"\n[1] \"Prediction error: 0.1193\"\n[1] \"Prediction error: 0.1499\"\n[1] \"Simulation: 099\"\n[1] \"Prediction error (intensity): 0.0034\"\n[1] \"Prediction error: 0.0997\"\n[1] \"Prediction error: 0.0368\"\n[1] \"Simulation: 100\"\n[1] \"Prediction error (intensity): 9e-04\"\n[1] \"Prediction error: 0.0753\"\n[1] \"Prediction error: 0.0094\"\n",
        "> ",
        "",
        "> ",
        "saveRDS(errors, file = paste(\"FITTED_MODELS/\", sprintf(\"%02d\", scenario), \"/ERRORS/\", fitted_model, \"-\", smoothing_kernel, \"-\", partition_const, \"-\", n_center_points, \"-\", sample_size, \".rds\", sep = \"\"))",
        "> ",
        "c(NA, 1)",
        "[1] NA  1\n",
        "Warning messages:\n",
        "1: Not a validObject(): no slot of name \"srs\" for this object of class \"RasterLayer\" \n",
        "2: Not a validObject(): no slot of name \"srs\" for this object of class \"RasterLayer\" \n",
        "3: Not a validObject(): no slot of name \"srs\" for this object of class \"RasterLayer\" \n",
        "4: Not a validObject(): no slot of name \"srs\" for this object of class \"RasterLayer\" \n",
        "5: Not a validObject(): no slot of name \"srs\" for this object of class \"RasterLayer\" \n",
        "6: Not a validObject(): no slot of name \"srs\" for this object of class \"RasterLayer\" \n",
        "7: Not a validObject(): no slot of name \"srs\" for this object of class \"RasterLayer\" \n",
        "8: Not a validObject(): no slot of name \"srs\" for this object of class \"RasterLayer\" \n",
        "> ",
        "c(MULL, 1)",
        "Error: object 'MULL' not found\n",
        "> ",
        "c(NULL, 1)",
        "[1] 1\n",
        "> ",
        "ie <- c()",
        "> ",
        "le <- c()",
        "> ",
        "pe <- c()",
        "> ",
        "for (n in 1:100) { ",
        "+ ",
        "  ie <- c(aa, errors[[n]]$error_intensity) ",
        "+ ",
        "  le <- c(aa, errors[[n]]$error_latent)",
        "+ ",
        "  pe <- c(aa, errors[[n]]$error_preferentiality) ",
        "+ ",
        "}",
        "Error in c(aa, errors[[n]]$error_intensity) : object 'aa' not found\n",
        "> ",
        "ie <- c()",
        "> ",
        "le <- c()",
        "> ",
        "pe <- c()",
        "> ",
        "for (n in 1:100) { ",
        "+ ",
        "  ie <- c(ie, errors[[n]]$error_intensity) ",
        "+ ",
        "  le <- c(le, errors[[n]]$error_latent)",
        "+ ",
        "  pe <- c(pe, errors[[n]]$error_preferentiality) ",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "ie",
        "  [1] 0.0008444366 0.0011296793 0.0023650097 0.0042118604 0.0127499033 0.0047162783 0.0129177237 0.0021314111 0.0115184495 0.0155982669 0.0036790870 0.0033309324 0.0013076286 0.0087796972 0.0015792052 0.0025264674\n [17] 0.0056182901 0.0026807593 0.0038548533 0.0060052175 0.0059021364 0.0039205572 0.0090380652 0.0220822600 0.0135440161 0.0023601132 0.0012539502 0.0126236720 0.0010843009 0.0036394966 0.0170295683 0.0056953882\n [33] 0.0027562157 0.0077963622 0.0031063323 0.0017468281 0.0017487965 0.0171873871 0.0030094103",
        " 0.0038580106 0.0022000113 0.0020352921 0.0048348387 0.0122940262 0.0009194870 0.0111202330 0.0045806366 0.0009230192\n [49] 0.0024130801 0.0049258430 0.0024838684 0.0030444182 0.0052199999 0.0017890150 0.0172297737 0.0029965466 0.0008344185 0.0038181468 0.0117735802 0.0016962394 0.0092799618 0.0053008024 0.0008971259 0.0031814697\n [65] 0.0189799556 0.0034820129 0.0090078307 0.0012461815 0.0025002452 0.0043124910 0.0032949233 0.0009868643 0.0033424314 0.0048899221 0.0013897924 0.0003324883 0.0024412409 0.0011698537",
        " 0.0029057665 0.0021812933\n [81] 0.0184601626 0.0015498737 0.0011542448 0.0064993804 0.0045246352 0.0009634524 0.0023770796 0.0019702458 0.0020159237 0.0094429385 0.0021432381 0.0165333260 0.0112784121 0.0012042975 0.0086825321 0.0015553683\n [97] 0.0034278762 0.0039316008 0.0033951040 0.0009320931\n",
        "> ",
        "boxplot(pe)",
        "> ",
        "mean(pe)",
        "[1] 0.1920921\n",
        "> ",
        "sd(pe)",
        "[1] 0.240848\n",
        "> ",
        "boxplot(le)",
        "> ",
        "mean(le)",
        "[1] 0.1437291\n",
        "> ",
        "sd(le)",
        "[1] 0.08283091\n",
        "> ",
        "mean(pe)",
        "[1] 0.1920921\n",
        "> ",
        "mean(ie)",
        "[1] 0.005272249\n",
        "> ",
        "scenario         <- 3",
        "> ",
        "sample_size      <- 500",
        "> ",
        "smoothing_kernel <- \"partition\"",
        "> ",
        "partition_const  <- \"non_constant\"",
        "> ",
        "n_center_points  <- \"many\"",
        "> ",
        "fitted_model     <- \"var_DP_PS\" # \"non_PS\", \"const_DP_PS\", and \"var_DP_PS\"",
        "> ",
        "",
        "> ",
        "source(\"header.R\")",
        "> ",
        "source(\"functions_data_generation.R\")",
        "> ",
        "source(\"functions_model_fitting.R\")",
        "> ",
        "source(\"functions_result_processing.R\")",
        "> ",
        "source(\"functions_aux.R\")",
        "> ",
        "",
        "> ",
        "normalize_function <- function (r1, r2, ...) {",
        "+ ",
        "  mm <- max(c(values(r1), values(r2)))",
        "+ ",
        "  mn <- min(c(values(r1), values(r2)))",
        "+ ",
        "  values(r1) <- (values(r1) - mn) / (mm - mn)",
        "+ ",
        "  values(r2) <- (values(r2) - mn) / (mm - mn)",
        "+ ",
        "  ",
        "+ ",
        "  list(r1, r2)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "plotting_true_fitted <- function (true, fitted, title = \"Latent\", fitted_model = \"non_PS\", ...) {",
        "+ ",
        "  par(mfrow = c(1, 2)); ",
        "+ ",
        "  len  <- 199",
        "+ ",
        "  brks <- round(seq(from = 0, to = 1, length.out = len), 9)",
        "+ ",
        "  arg  <- list(at = seq(from = 0, to = 1, length.out = 5), labels = round(seq(from = 0, to = 1, length.out = 5), digits = 2)) ",
        "+ ",
        "  plot(true,   breaks = brks, col = rainbow(n = len, start = 0.05, end = 0.85), axis.arg = arg, main = paste(\"Original \", title, \" Process\", sep = \"\"))",
        "+ ",
        "  plot(fitted, breaks = brks, col = rainbow(n = len, start = 0.05, end = 0.85), axis.arg = arg, main = paste(\"Estimated \", title, \" Process (\", fitted_model, \")\", sep = \"\"))",
        "+ ",
        "  par(mfrow = c(1, 1))",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "set.seed(1)",
        "> ",
        "",
        "> ",
        "##################################################",
        "> ",
        "# Initial parameters",
        "> ",
        "##################################################",
        "> ",
        "xlim <- c(0, 10)",
        "> ",
        "ylim <- c(0, 10)",
        "> ",
        "by <- 0.05",
        "> ",
        "mu <- 2",
        "> ",
        "nu <- 1",
        "> ",
        "scl <- 2",
        "> ",
        "sig2 <- 1",
        "> ",
        "sig2_error <- 1",
        "> ",
        "",
        "> ",
        "n_points <- NULL",
        "> ",
        "pref_sampling <- TRUE",
        "> ",
        "",
        "> ",
        "NS <- FALSE",
        "> ",
        "normalize <- TRUE",
        "> ",
        "plotting <- FALSE",
        "> ",
        "##################################################",
        "> ",
        "",
        "> ",
        "N_sim <- 125",
        "> ",
        "",
        "> ",
        "data <- readRDS(file = paste(\"DATA/\", sprintf(\"%02d\", scenario), \"/\", sample_size, \".rds\", sep = \"\"))",
        "> ",
        "results <- readRDS(file = paste(\"FITTED_MODELS/\", sprintf(\"%02d\", scenario), \"/\", fitted_model, \"-\", smoothing_kernel, \"-\", partition_const, \"-\", n_center_points, \"-\", sample_size, \".rds\", sep = \"\"))",
        "> ",
        "others <- readRDS(file = paste(\"FITTED_MODELS/\", sprintf(\"%02d\", scenario), \"/OTHERS/\", fitted_model, \"-\", smoothing_kernel, \"-\", partition_const, \"-\", n_center_points, \"-\", sample_size, \".rds\", sep = \"\"))",
        "> ",
        "",
        "> ",
        "##################################################",
        "> ",
        "",
        "> ",
        "N_models <- 100",
        "> ",
        "failed_models <- rep(x = 0, times = N_sim)",
        "> ",
        "for (n in 1:N_sim) { failed_models[n] <- ifelse(test = !results[[n]]$fit$ok, yes = 1, no = 0) }",
        "> ",
        "idxs <- which(failed_models == 0)",
        "> ",
        "if (length(idxs) >= N_models) { idxs <- idxs[1:N_models] } else { stop(paste(\"Less than \", N_models , \" successfully fitted models.\", sep = \"\")) }",
        "> ",
        "",
        "> ",
        "data <- data[idxs]",
        "> ",
        "results <- results[idxs]",
        "> ",
        "others <- others[idxs]",
        "> ",
        "",
        "> ",
        "##################################################",
        "> ",
        "",
        "> ",
        "errors <- list()",
        "> ",
        "for (n in 1:N_models) {",
        "+ ",
        "  print(paste(\"Simulation: \", sprintf(\"%03d\", n), sep = \"\"))",
        "+ ",
        "  ",
        "+ ",
        "  latt <- data[[n]]$latt",
        "+ ",
        "  pref <- data[[n]]$pref",
        "+ ",
        "  loct <- data[[n]]$loct",
        "+ ",
        "  Yobs <- data[[n]]$Yobs",
        "+ ",
        "  orig <- data[[n]]$orig",
        "+ ",
        "  ",
        "+ ",
        "  alpha <- data[[n]]$alpha",
        "+ ",
        "  ",
        "+ ",
        "  result <- results[[n]]",
        "+ ",
        "  fs_formula <- others[[n]]$fs_formula",
        "+ ",
        "  ",
        "+ ",
        "  ##############################",
        "+ ",
        "  # Intensity Process",
        "+ ",
        "  ##############################",
        "+ ",
        "  ",
        "+ ",
        "  if (fitted_model %in% c(\"const_DP_PS\", \"var_DP_PS\")) { ",
        "+ ",
        "    ",
        "+ ",
        "    idx_int <- inla.stack.index(fs_formula$full_stack, tag = \"pred_pp\")$data",
        "+ ",
        "    fitted_intensity_partial <- exp(result$fit$summary.fitted.values[idx_int, c(\"mean\")])",
        "+ ",
        "    ",
        "+ ",
        "    fitted_intensity <- loct$lambda",
        "+ ",
        "    values(fitted_intensity) <- fitted_intensity_partial",
        "+ ",
        "    ",
        "+ ",
        "    if (normalize) { r <- normalize_function(r1 = loct$lambda, r2 = fitted_intensity); true_intensity <- r[[1]]; fitted_intensity <- r[[2]] }",
        "+ ",
        "    ",
        "+ ",
        "    error_intensity <- MSE(orig = true_intensity, pred = fitted_intensity)",
        "+ ",
        "    print(paste(\"Prediction error (intensity): \", round(x = error_intensity, digits = 4), sep = \"\"))",
        "+ ",
        "    ",
        "+ ",
        "    if (plotting) { plotting_true_fitted(true = true_intensity, fitted = fitted_intensity, title = \"Intensity\", fitted_model = fitted_model) }",
        "+ ",
        "  } else { error_intensity <- NA }",
        "+ ",
        "  ",
        "+ ",
        "  ##############################",
        "+ ",
        "  # Latent Process",
        "+ ",
        "  ##############################",
        "+ ",
        "  ",
        "+ ",
        "  idx_lat <- inla.stack.index(fs_formula$full_stack, tag = \"pred_y\")$data",
        "+ ",
        "  fitted_latent_partial <- result$fit$summary.fitted.values[idx_lat, c(\"mean\")]",
        "+ ",
        "  ",
        "+ ",
        "  fitted_latent <- latt ",
        "+ ",
        "  values(fitted_latent) <- fitted_latent_partial",
        "+ ",
        "  ",
        "+ ",
        "  if (normalize) { r <- normalize_function(r1 = latt, r2 = fitted_latent); true_latent <- r[[1]]; fitted_latent <- r[[2]] }",
        "+ ",
        "  ",
        "+ ",
        "  error_latent <- MSE(orig = true_latent, pred = fitted_latent)",
        "+ ",
        "  print(paste(\"Prediction error (latent): \", round(x = error_latent, digits = 4), sep = \"\"))",
        "+ ",
        "  ",
        "+ ",
        "  if (plotting) { plotting_true_fitted(true = true_latent, fitted = fitted_latent, title = \"Latent\", fitted_model = fitted_model) }",
        "+ ",
        "",
        "+ ",
        "  ##############################",
        "+ ",
        "  # Preferentiality Process",
        "+ ",
        "  ##############################",
        "+ ",
        "  ",
        "+ ",
        "  coord_pred <- others[[n]]$coord_pred",
        "+ ",
        "  bfs_pred <- others[[n]]$bfs_pred",
        "+ ",
        "  ",
        "+ ",
        "  if (fitted_model == \"var_DP_PS\") {",
        "+ ",
        "    ",
        "+ ",
        "    fitted_preferentiality <- compute_preferentiatility(fit = result$fit, coord_pred = coord_pred, bfs_pred = bfs_pred, xlim = xlim, by = by)",
        "+ ",
        "    ",
        "+ ",
        "    if (normalize) { r <- normalize_function(r1 = pref, r2 = fitted_preferentiality); true_preferentiality <- r[[1]]; fitted_preferentiality <- r[[2]] }",
        "+ ",
        "    ",
        "+ ",
        "    error_preferentiality <- MSE(orig = true_preferentiality, pred = fitted_preferentiality)",
        "+ ",
        "    print(paste(\"Prediction error (preferentiatility): \", round(x = error_preferentiality, digits = 4), sep = \"\"))",
        "+ ",
        "    ",
        "+ ",
        "    if (plotting) { plotting_true_fitted(true = true_preferentiality, fitted = fitted_preferentiality, title = \"Preferentiality\", fitted_model = fitted_model) }",
        "+ ",
        "    ",
        "+ ",
        "  } else { error_preferentiality <- NA }",
        "+ ",
        "  ",
        "+ ",
        "  ##############################",
        "+ ",
        "  ##############################",
        "+ ",
        "  ",
        "+ ",
        "  errors[[n]] <- list(error_intensity = error_intensity, error_latent = error_latent, error_preferentiality = error_preferentiality)",
        "+ ",
        "}",
        "[1] \"Simulation: 001\"\n[1] \"Prediction error (intensity): 8e-04\"\n[1] \"Prediction error (latent): 0.0877\"\n[1] \"Prediction error (preferentiatility): 0.0816\"\n[1] \"Simulation: 002\"\n[1] \"Prediction error (intensity): 0.0011\"\n[1] \"Prediction error (latent): 0.0842\"\n[1] \"Prediction error (preferentiatility): 0.0189\"\n[1] \"Simulation: 003\"\n[1] \"Prediction error (intensity): 0.0024\"\n[1] \"Prediction error (latent): 0.0914\"\n[1] \"Prediction error (preferentiatility): 0.0065\"\n[1] \"Simulation: 004\"\n[1] \"Prediction error (intensity): 0.0042\"",
        "\n[1] \"Prediction error (latent): 0.0792\"\n[1] \"Prediction error (preferentiatility): 0.1483\"\n[1] \"Simulation: 005\"\n[1] \"Prediction error (intensity): 0.0127\"\n[1] \"Prediction error (latent): 0.2888\"\n[1] \"Prediction error (preferentiatility): 0.5896\"\n[1] \"Simulation: 006\"\n[1] \"Prediction error (intensity): 0.0047\"\n[1] \"Prediction error (latent): 0.0881\"\n[1] \"Prediction error (preferentiatility): 0.0405\"\n[1] \"Simulation: 007\"\n[1] \"Prediction error (intensity): 0.0129\"\n[1] \"Prediction error (latent): 0.2793\"\n[1]",
        " \"Prediction error (preferentiatility): 0.5134\"\n[1] \"Simulation: 008\"\n[1] \"Prediction error (intensity): 0.0021\"\n[1] \"Prediction error (latent): 0.0852\"\n[1] \"Prediction error (preferentiatility): 0.1203\"\n[1] \"Simulation: 009\"\n[1] \"Prediction error (intensity): 0.0115\"\n[1] \"Prediction error (latent): 0.3174\"\n[1] \"Prediction error (preferentiatility): 0.63\"\n[1] \"Simulation: 010\"\n[1] \"Prediction error (intensity): 0.0156\"\n[1] \"Prediction error (latent): 0.2409\"\n[1] \"Prediction error (preferentiatility): 0.6305\"",
        "\n[1] \"Simulation: 011\"\n[1] \"Prediction error (intensity): 0.0037\"\n[1] \"Prediction error (latent): 0.1138\"\n[1] \"Prediction error (preferentiatility): 0.0181\"\n[1] \"Simulation: 012\"\n[1] \"Prediction error (intensity): 0.0033\"\n[1] \"Prediction error (latent): 0.1296\"\n[1] \"Prediction error (preferentiatility): 0.051\"\n[1] \"Simulation: 013\"\n[1] \"Prediction error (intensity): 0.0013\"\n[1] \"Prediction error (latent): 0.094\"\n[1] \"Prediction error (preferentiatility): 0.0124\"\n[1] \"Simulation: 014\"\n[1] \"Prediction error (intensity): 0.0088\"",
        "\n[1] \"Prediction error (latent): 0.2452\"\n[1] \"Prediction error (preferentiatility): 0.5836\"\n[1] \"Simulation: 015\"\n[1] \"Prediction error (intensity): 0.0016\"\n[1] \"Prediction error (latent): 0.1081\"\n[1] \"Prediction error (preferentiatility): 0.0075\"\n[1] \"Simulation: 016\"\n[1] \"Prediction error (intensity): 0.0025\"\n[1] \"Prediction error (latent): 0.0823\"\n[1] \"Prediction error (preferentiatility): 0.0866\"\n[1] \"Simulation: 017\"\n[1] \"Prediction error (intensity): 0.0056\"\n[1] \"Prediction error (latent): 0.122\"\n[1] \"Prediction error (preferentiatility): 0.1064\"",
        "\n[1] \"Simulation: 018\"\n[1] \"Prediction error (intensity): 0.0027\"\n[1] \"Prediction error (latent): 0.1018\"\n[1] \"Prediction error (preferentiatility): 0.0268\"\n[1] \"Simulation: 019\"\n[1] \"Prediction error (intensity): 0.0039\"\n[1] \"Prediction error (latent): 0.0884\"\n[1] \"Prediction error (preferentiatility): 0.0757\"\n[1] \"Simulation: 020\"\n[1] \"Prediction error (intensity): 0.006\"\n[1] \"Prediction error (latent): 0.1999\"\n[1] \"Prediction error (preferentiatility): 0.694\"\n[1] \"Simulation: 021\"\n[1] \"Prediction error (intensity): 0.0059\"",
        "\n[1] \"Prediction error (latent): 0.1049\"\n[1] \"Prediction error (preferentiatility): 0.0649\"\n[1] \"Simulation: 022\"\n[1] \"Prediction error (intensity): 0.0039\"\n[1] \"Prediction error (latent): 0.1202\"\n[1] \"Prediction error (preferentiatility): 0.0487\"\n[1] \"Simulation: 023\"\n[1] \"Prediction error (intensity): 0.009\"\n[1] \"Prediction error (latent): 0.2683\"\n[1] \"Prediction error (preferentiatility): 0.6047\"\n[1] \"Simulation: 024\"\n[1] \"Prediction error (intensity): 0.0221\"\n[1] \"Prediction error (latent): 0.2725\"\n[1] \"Prediction error (preferentiatility): 0.4422\"",
        "\n[1] \"Simulation: 025\"\n[1] \"Prediction error (intensity): 0.0135\"\n[1] \"Prediction error (latent): 0.2529\"\n[1] \"Prediction error (preferentiatility): 0.6666\"\n[1] \"Simulation: 026\"\n[1] \"Prediction error (intensity): 0.0024\"\n[1] \"Prediction error (latent): 0.0923\"\n[1] \"Prediction error (preferentiatility): 0.0534\"\n[1] \"Simulation: 027\"\n[1] \"Prediction error (intensity): 0.0013\"\n[1] \"Prediction error (latent): 0.1019\"\n[1] \"Prediction error (preferentiatility): 0.0297\"\n[1] \"Simulation: 028\"\n[1] \"Prediction error (intensity): 0.0126\"",
        "\n[1] \"Prediction error (latent): 0.3427\"\n[1] \"Prediction error (preferentiatility): 0.5649\"\n[1] \"Simulation: 029\"\n[1] \"Prediction error (intensity): 0.0011\"\n[1] \"Prediction error (latent): 0.0846\"\n[1] \"Prediction error (preferentiatility): 0.0657\"\n[1] \"Simulation: 030\"\n[1] \"Prediction error (intensity): 0.0036\"\n[1] \"Prediction error (latent): 0.1314\"\n[1] \"Prediction error (preferentiatility): 0.0761\"\n[1] \"Simulation: 031\"\n[1] \"Prediction error (intensity): 0.017\"\n[1] \"Prediction error (latent): 0.2919\"\n[1] \"Prediction error (preferentiatility): 0.121\"",
        "\n[1] \"Simulation: 032\"\n[1] \"Prediction error (intensity): 0.0057\"\n[1] \"Prediction error (latent): 0.1113\"\n[1] \"Prediction error (preferentiatility): 0.0199\"\n[1] \"Simulation: 033\"\n[1] \"Prediction error (intensity): 0.0028\"\n[1] \"Prediction error (latent): 0.0987\"\n[1] \"Prediction error (preferentiatility): 0.0342\"\n[1] \"Simulation: 034\"\n[1] \"Prediction error (intensity): 0.0078\"\n[1] \"Prediction error (latent): 0.3519\"\n[1] \"Prediction error (preferentiatility): 0.5058\"\n[1] \"Simulation: 035\"\n[1] \"Prediction error (intensity): 0.0031\"",
        "\n[1] \"Prediction error (latent): 0.0649\"\n[1] \"Prediction error (preferentiatility): 0.2576\"\n[1] \"Simulation: 036\"\n[1] \"Prediction error (intensity): 0.0017\"\n[1] \"Prediction error (latent): 0.0966\"\n[1] \"Prediction error (preferentiatility): 0.0409\"\n[1] \"Simulation: 037\"\n[1] \"Prediction error (intensity): 0.0017\"\n[1] \"Prediction error (latent): 0.0937\"\n[1] \"Prediction error (preferentiatility): 0.0766\"\n[1] \"Simulation: 038\"\n[1] \"Prediction error (intensity): 0.0172\"\n[1] \"Prediction error (latent): 0.2851\"\n[1]",
        " \"Prediction error (preferentiatility): 0.1936\"\n[1] \"Simulation: 039\"\n[1] \"Prediction error (intensity): 0.003\"\n[1] \"Prediction error (latent): 0.0658\"\n[1] \"Prediction error (preferentiatility): 0.0578\"\n[1] \"Simulation: 040\"\n[1] \"Prediction error (intensity): 0.0039\"\n[1] \"Prediction error (latent): 0.1066\"\n[1] \"Prediction error (preferentiatility): 0.1132\"\n[1] \"Simulation: 041\"\n[1] \"Prediction error (intensity): 0.0022\"\n[1] \"Prediction error (latent): 0.0806\"\n[1] \"Prediction error (preferentiatility): 0.057\"",
        "\n[1] \"Simulation: 042\"\n[1] \"Prediction error (intensity): 0.002\"\n[1] \"Prediction error (latent): 0.0775\"\n[1] \"Prediction error (preferentiatility): 0.0594\"\n[1] \"Simulation: 043\"\n[1] \"Prediction error (intensity): 0.0048\"\n[1] \"Prediction error (latent): 0.1138\"\n[1] \"Prediction error (preferentiatility): 0.0829\"\n[1] \"Simulation: 044\"\n[1] \"Prediction error (intensity): 0.0123\"\n[1] \"Prediction error (latent): 0.1731\"\n[1] \"Prediction error (preferentiatility): 0.5695\"\n[1] \"Simulation: 045\"\n[1] \"Prediction error (intensity): 9e-04\"",
        "\n[1] \"Prediction error (latent): 0.0839\"\n[1] \"Prediction error (preferentiatility): 0.0132\"\n[1] \"Simulation: 046\"\n[1] \"Prediction error (intensity): 0.0111\"\n[1] \"Prediction error (latent): 0.2613\"\n[1] \"Prediction error (preferentiatility): 0.4613\"\n[1] \"Simulation: 047\"\n[1] \"Prediction error (intensity): 0.0046\"\n[1] \"Prediction error (latent): 0.1048\"\n[1] \"Prediction error (preferentiatility): 0.2166\"\n[1] \"Simulation: 048\"\n[1] \"Prediction error (intensity): 9e-04\"\n[1] \"Prediction error (latent): 0.0731\"\n[1] \"Prediction error (preferentiatility): 0.1023\"",
        "\n[1] \"Simulation: 049\"\n[1] \"Prediction error (intensity): 0.0024\"\n[1] \"Prediction error (latent): 0.1396\"\n[1] \"Prediction error (preferentiatility): 0.0797\"\n[1] \"Simulation: 050\"\n[1] \"Prediction error (intensity): 0.0049\"\n[1] \"Prediction error (latent): 0.2784\"\n[1] \"Prediction error (preferentiatility): 0.6773\"\n[1] \"Simulation: 051\"\n[1] \"Prediction error (intensity): 0.0025\"\n[1] \"Prediction error (latent): 0.0935\"\n[1] \"Prediction error (preferentiatility): 0.0509\"\n[1] \"Simulation: 052\"\n[1] \"Prediction error (intensity): 0.003\"",
        "\n[1] \"Prediction error (latent): 0.076\"\n[1] \"Prediction error (preferentiatility): 0.0944\"\n[1] \"Simulation: 053\"\n[1] \"Prediction error (intensity): 0.0052\"\n[1] \"Prediction error (latent): 0.0621\"\n[1] \"Prediction error (preferentiatility): 0.0455\"\n[1] \"Simulation: 054\"\n[1] \"Prediction error (intensity): 0.0018\"\n[1] \"Prediction error (latent): 0.1259\"\n[1] \"Prediction error (preferentiatility): 0.0085\"\n[1] \"Simulation: 055\"\n[1] \"Prediction error (intensity): 0.0172\"\n[1] \"Prediction error (latent): 0.3544\"\n[1] \"Prediction error (preferentiatility): 0.625\"",
        "\n[1] \"Simulation: 056\"\n[1] \"Prediction error (intensity): 0.003\"\n[1] \"Prediction error (latent): 0.1121\"\n[1] \"Prediction error (preferentiatility): 0.033\"\n[1] \"Simulation: 057\"\n[1] \"Prediction error (intensity): 8e-04\"\n[1] \"Prediction error (latent): 0.0862\"\n[1] \"Prediction error (preferentiatility): 0.0363\"\n[1] \"Simulation: 058\"\n[1] \"Prediction error (intensity): 0.0038\"\n[1] \"Prediction error (latent): 0.1074\"\n[1] \"Prediction error (preferentiatility): 0.0591\"\n[1] \"Simulation: 059\"\n[1] \"Prediction error (intensity): 0.0118\"",
        "\n[1] \"Prediction error (latent): 0.2399\"\n[1] \"Prediction error (preferentiatility): 0.6972\"\n[1] \"Simulation: 060\"\n[1] \"Prediction error (intensity): 0.0017\"\n[1] \"Prediction error (latent): 0.0777\"\n[1] \"Prediction error (preferentiatility): 0.0623\"\n[1] \"Simulation: 061\"\n[1] \"Prediction error (intensity): 0.0093\"\n[1] \"Prediction error (latent): 0.2322\"\n[1] \"Prediction error (preferentiatility): 0.5938\"\n[1] \"Simulation: 062\"\n[1] \"Prediction error (intensity): 0.0053\"\n[1] \"Prediction error (latent): 0.1338\"\n[1]",
        " \"Prediction error (preferentiatility): 0.0245\"\n[1] \"Simulation: 063\"\n[1] \"Prediction error (intensity): 9e-04\"\n[1] \"Prediction error (latent): 0.0852\"\n[1] \"Prediction error (preferentiatility): 0.046\"\n[1] \"Simulation: 064\"\n[1] \"Prediction error (intensity): 0.0032\"\n[1] \"Prediction error (latent): 0.0928\"\n[1] \"Prediction error (preferentiatility): 0.0746\"\n[1] \"Simulation: 065\"\n[1] \"Prediction error (intensity): 0.019\"\n[1] \"Prediction error (latent): 0.1933\"\n[1] \"Prediction error (preferentiatility): 0.7888\"",
        "\n[1] \"Simulation: 066\"\n[1] \"Prediction error (intensity): 0.0035\"\n[1] \"Prediction error (latent): 0.1113\"\n[1] \"Prediction error (preferentiatility): 0.0574\"\n[1] \"Simulation: 067\"\n[1] \"Prediction error (intensity): 0.009\"\n[1] \"Prediction error (latent): 0.3059\"\n[1] \"Prediction error (preferentiatility): 0.7541\"\n[1] \"Simulation: 068\"\n[1] \"Prediction error (intensity): 0.0012\"\n[1] \"Prediction error (latent): 0.0805\"\n[1] \"Prediction error (preferentiatility): 0.0235\"\n[1] \"Simulation: 069\"\n[1] \"Prediction error (intensity): 0.0025\"",
        "\n[1] \"Prediction error (latent): 0.1099\"\n[1] \"Prediction error (preferentiatility): 0.0262\"\n[1] \"Simulation: 070\"\n[1] \"Prediction error (intensity): 0.0043\"\n[1] \"Prediction error (latent): 0.1073\"\n[1] \"Prediction error (preferentiatility): 0.0643\"\n[1] \"Simulation: 071\"\n[1] \"Prediction error (intensity): 0.0033\"\n[1] \"Prediction error (latent): 0.106\"\n[1] \"Prediction error (preferentiatility): 0.1096\"\n[1] \"Simulation: 072\"\n[1] \"Prediction error (intensity): 0.001\"\n[1] \"Prediction error (latent): 0.0829\"\n[1] \"Prediction error (preferentiatility): 0.0363\"",
        "\n[1] \"Simulation: 073\"\n[1] \"Prediction error (intensity): 0.0033\"\n[1] \"Prediction error (latent): 0.0806\"\n[1] \"Prediction error (preferentiatility): 0.0663\"\n[1] \"Simulation: 074\"\n[1] \"Prediction error (intensity): 0.0049\"\n[1] \"Prediction error (latent): 0.1281\"\n[1] \"Prediction error (preferentiatility): 0.0892\"\n[1] \"Simulation: 075\"\n[1] \"Prediction error (intensity): 0.0014\"\n[1] \"Prediction error (latent): 0.1025\"\n[1] \"Prediction error (preferentiatility): 0.0224\"\n[1] \"Simulation: 076\"\n[1] \"Prediction error (intensity): 3e-04\"",
        "\n[1] \"Prediction error (latent): 0.0508\"\n[1] \"Prediction error (preferentiatility): 0.0181\"\n[1] \"Simulation: 077\"\n[1] \"Prediction error (intensity): 0.0024\"\n[1] \"Prediction error (latent): 0.1016\"\n[1] \"Prediction error (preferentiatility): 0.0963\"\n[1] \"Simulation: 078\"\n[1] \"Prediction error (intensity): 0.0012\"\n[1] \"Prediction error (latent): 0.0996\"\n[1] \"Prediction error (preferentiatility): 0.0459\"\n[1] \"Simulation: 079\"\n[1] \"Prediction error (intensity): 0.0029\"\n[1] \"Prediction error (latent): 0.0935\"\n[1]",
        " \"Prediction error (preferentiatility): 0.0505\"\n[1] \"Simulation: 080\"\n[1] \"Prediction error (intensity): 0.0022\"\n[1] \"Prediction error (latent): 0.1075\"\n[1] \"Prediction error (preferentiatility): 0.0523\"\n[1] \"Simulation: 081\"\n[1] \"Prediction error (intensity): 0.0185\"\n[1] \"Prediction error (latent): 0.2755\"\n[1] \"Prediction error (preferentiatility): 0.5467\"\n[1] \"Simulation: 082\"\n[1] \"Prediction error (intensity): 0.0015\"\n[1] \"Prediction error (latent): 0.13\"\n[1] \"Prediction error (preferentiatility): 0.046\"",
        "\n[1] \"Simulation: 083\"\n[1] \"Prediction error (intensity): 0.0012\"\n[1] \"Prediction error (latent): 0.0723\"\n[1] \"Prediction error (preferentiatility): 0.0065\"\n[1] \"Simulation: 084\"\n[1] \"Prediction error (intensity): 0.0065\"\n[1] \"Prediction error (latent): 0.1454\"\n[1] \"Prediction error (preferentiatility): 0.1159\"\n[1] \"Simulation: 085\"\n[1] \"Prediction error (intensity): 0.0045\"\n[1] \"Prediction error (latent): 0.0903\"\n[1] \"Prediction error (preferentiatility): 0.0634\"\n[1] \"Simulation: 086\"\n[1] \"Prediction error (intensity): 0.001\"",
        "\n[1] \"Prediction error (latent): 0.068\"\n[1] \"Prediction error (preferentiatility): 0.043\"\n[1] \"Simulation: 087\"\n[1] \"Prediction error (intensity): 0.0024\"\n[1] \"Prediction error (latent): 0.1261\"\n[1] \"Prediction error (preferentiatility): 0.0412\"\n[1] \"Simulation: 088\"\n[1] \"Prediction error (intensity): 0.002\"\n[1] \"Prediction error (latent): 0.1066\"\n[1] \"Prediction error (preferentiatility): 0.0231\"\n[1] \"Simulation: 089\"\n[1] \"Prediction error (intensity): 0.002\"\n[1] \"Prediction error (latent): 0.1066\"\n[1] \"Prediction error (preferentiatility): 0.0891\"",
        "\n[1] \"Simulation: 090\"\n[1] \"Prediction error (intensity): 0.0094\"\n[1] \"Prediction error (latent): 0.3327\"\n[1] \"Prediction error (preferentiatility): 0.5452\"\n[1] \"Simulation: 091\"\n[1] \"Prediction error (intensity): 0.0021\"\n[1] \"Prediction error (latent): 0.1322\"\n[1] \"Prediction error (preferentiatility): 0.0455\"\n[1] \"Simulation: 092\"\n[1] \"Prediction error (intensity): 0.0165\"\n[1] \"Prediction error (latent): 0.2923\"\n[1] \"Prediction error (preferentiatility): 0.5953\"\n[1] \"Simulation: 093\"\n[1] \"Prediction error (intensity): 0.0113\"",
        "\n[1] \"Prediction error (latent): 0.2435\"\n[1] \"Prediction error (preferentiatility): 0.5937\"\n[1] \"Simulation: 094\"\n[1] \"Prediction error (intensity): 0.0012\"\n[1] \"Prediction error (latent): 0.1008\"\n[1] \"Prediction error (preferentiatility): 0.0195\"\n[1] \"Simulation: 095\"\n[1] \"Prediction error (intensity): 0.0087\"\n[1] \"Prediction error (latent): 0.3029\"\n[1] \"Prediction error (preferentiatility): 0.6695\"\n[1] \"Simulation: 096\"\n[1] \"Prediction error (intensity): 0.0016\"\n[1] \"Prediction error (latent): 0.0671\"\n[1]",
        " \"Prediction error (preferentiatility): 0.0128\"\n[1] \"Simulation: 097\"\n[1] \"Prediction error (intensity): 0.0034\"\n[1] \"Prediction error (latent): 0.0944\"\n[1] \"Prediction error (preferentiatility): 0.0055\"\n[1] \"Simulation: 098\"\n[1] \"Prediction error (intensity): 0.0039\"\n[1] \"Prediction error (latent): 0.1193\"\n[1] \"Prediction error (preferentiatility): 0.1499\"\n[1] \"Simulation: 099\"\n[1] \"Prediction error (intensity): 0.0034\"\n[1] \"Prediction error (latent): 0.0997\"\n[1] \"Prediction error (preferentiatility): 0.0368\"",
        "\n[1] \"Simulation: 100\"\n[1] \"Prediction error (intensity): 9e-04\"\n[1] \"Prediction error (latent): 0.0753\"\n[1] \"Prediction error (preferentiatility): 0.0094\"\n",
        "> ",
        "",
        "> ",
        "saveRDS(errors, file = paste(\"FITTED_MODELS/\", sprintf(\"%02d\", scenario), \"/ERRORS/\", fitted_model, \"-\", smoothing_kernel, \"-\", partition_const, \"-\", n_center_points, \"-\", sample_size, \".rds\", sep = \"\"))",
        "\nRestarting R session...\n\n"
    ]
}